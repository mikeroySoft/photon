<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>– Photon OS Documentation</title><link>/docs/</link><description>Recent content in Photon OS Documentation on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 10 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs-V3: Boot in Emergency Mode</title><link>/docs-v3/troubleshooting-guide/solutions-to-common-problems/boot-in-emergency-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/troubleshooting-guide/solutions-to-common-problems/boot-in-emergency-mode/</guid><description>
&lt;p>If you encounter problems during normal boot, you can boot in Emergency Mode.&lt;/p>
&lt;p>Perform the following steps to boot in Emergency Mode:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Restart the Photon OS machine or the virtual machine running Photon OS.&lt;/p>
&lt;p>When the Photon OS splash screen appears, as it restarts, type the letter &lt;code>e&lt;/code> quickly.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Append &lt;code>emergency&lt;/code> to the kernel command line.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Press &lt;code>F10&lt;/code> to proceed with the boot.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>At the command prompt, provide the root password to log in to Emergency Mode.&lt;/p>
&lt;p>By default, &lt;code>/&lt;/code> is mounted as read-only.&lt;/p>
&lt;p>To make modifications, run the following command to remount with write access:&lt;/p>
&lt;p>&lt;code>mount -o remount,rw /&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Docs: Boot in Emergency Mode</title><link>/docs/troubleshooting-guide/solutions-to-common-problems/boot-in-emergency-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/troubleshooting-guide/solutions-to-common-problems/boot-in-emergency-mode/</guid><description>
&lt;p>If you encounter problems during normal boot, you can boot in Emergency Mode.&lt;/p>
&lt;p>Perform the following steps to boot in Emergency Mode:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Restart the Photon OS machine or the virtual machine running Photon OS.&lt;/p>
&lt;p>When the Photon OS splash screen appears, as it restarts, type the letter &lt;code>e&lt;/code> quickly.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Append &lt;code>emergency&lt;/code> to the kernel command line.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Press &lt;code>F10&lt;/code> to proceed with the boot.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>At the command prompt, provide the root password to log in to Emergency Mode.&lt;/p>
&lt;p>By default, &lt;code>/&lt;/code> is mounted as read-only.&lt;/p>
&lt;p>To make modifications, run the following command to remount with write access:&lt;/p>
&lt;p>&lt;code>mount -o remount,rw /&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Docs: Building Cloud Images</title><link>/docs/installation-guide/building-images/build-other-images/build-cloud-images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/installation-guide/building-images/build-other-images/build-cloud-images/</guid><description>
&lt;p>Perform the following steps to build the cloud images on Ubuntu:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Install the packages:&lt;/p>
&lt;pre>&lt;code>sudo apt-get -y install bison gawk g++ createrepo python-aptdaemon genisoimage texinfo python-requests libfuse-dev libssl-dev uuid-dev libreadline-dev kpartx git bc
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Get Docker:&lt;/p>
&lt;pre>&lt;code>wget -qO- https://get.docker.com/ | sh
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Install pip&lt;/p>
&lt;pre>&lt;code>sudo apt install python3-pip
pip3 install git+https://github.com/vmware/photon-os-installer.git
git clone https://github.com/vmware/photon.git
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;p>If you encounter an error for LOCALE when you run these commands, then export the following variables in the terminal:&lt;/p>
&lt;pre>&lt;code> `export LC_ALL=&amp;quot;en_US.UTF-8&amp;quot;`
&lt;/code>&lt;/pre>
&lt;p>&lt;code> export LC_CTYPE=&amp;quot;en_US.UTF-8&amp;quot;&lt;/code>&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>Clone`the Photon project:&lt;/p>
&lt;p>&lt;code>git clone https://github.com/vmware/photon.git&lt;/code>
&lt;code>cd $HOME/workspaces/photon&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Make the cloud image for AMI.&lt;/p>
&lt;p>&lt;code>sudo make image IMG_NAME=ami&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Make the cloud image for Azure.&lt;/p>
&lt;p>&lt;code>sudo make image IMG_NAME=azure&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Make the cloud image for GCE.&lt;/p>
&lt;p>&lt;code>sudo make image IMG_NAME=gce&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Result&lt;/strong>&lt;/p>
&lt;p>This command first builds all RPMs corresponding to the SPEC files in your Photon repository and then builds a bootable ISO containing those RPMs.&lt;/p>
&lt;p>The RPMs thus built are stored under &lt;code>stage/RPMS/&lt;/code> directory within the repository, using the following directory hierarchy:&lt;/p>
&lt;pre>&lt;code>$HOME/workspaces/photon/stage/:
├──RPMS/:
├──noarch/*.noarch.rpm [Architecture-independent RPMs]
├──x86_64/*.x86_64.rpm [RPMs built for the x86-64 architecture]
├──aarch64/*.aarch64.rpm [RPMs built for the aarch64 (ARM64) architecture]
&lt;/code>&lt;/pre>&lt;p>The cloud image is created at `$HOME/workspaces/photon.&lt;/p></description></item><item><title>Docs-V3: Checking Disk Space</title><link>/docs-v3/troubleshooting-guide/file-system-troubleshooting/checking-disk-space/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/troubleshooting-guide/file-system-troubleshooting/checking-disk-space/</guid><description>
&lt;p>One of the first simple steps to take while troubleshooting is to check how much disk space is available by running the &lt;code>df&lt;/code> command:&lt;/p>
&lt;pre>&lt;code>df -h&lt;/code>&lt;/pre></description></item><item><title>Docs: Checking Disk Space</title><link>/docs/troubleshooting-guide/file-system-troubleshooting/checking-disk-space/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/troubleshooting-guide/file-system-troubleshooting/checking-disk-space/</guid><description>
&lt;p>One of the first simple steps to take while troubleshooting is to check how much disk space is available by running the &lt;code>df&lt;/code> command:&lt;/p>
&lt;pre>&lt;code>df -h&lt;/code>&lt;/pre></description></item><item><title>Docs-V3: Cloud-Init Overview</title><link>/docs-v3/administration-guide/cloud-init-on-photon-os/cloud-init-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/administration-guide/cloud-init-on-photon-os/cloud-init-overview/</guid><description>
&lt;p>&lt;code>cloud-init&lt;/code> is a multi-distribution package that handles early initialization of a cloud instance.&lt;/p>
&lt;p>In-depth documentation for cloud-init is available here:&lt;/p>
&lt;p>&lt;a href="https://cloudinit.readthedocs.org/en/latest/">https://cloudinit.readthedocs.org/en/latest/&lt;/a>&lt;/p>
&lt;h1 id="supported-installations">Supported installations&lt;/h1>
&lt;p>Both the full version of and the minimal version of Photon OS support cloud-init.&lt;/p>
&lt;h1 id="supported-capabilities">Supported capabilities&lt;/h1>
&lt;p>Photon OS supports the following cloud-init capabilities:&lt;/p>
&lt;ul>
&lt;li>run commands: execute a list of commands with output to console.&lt;/li>
&lt;li>configure ssh keys: add an entry to ~/.ssh/authorized_keys for the configured user.&lt;/li>
&lt;li>install package: install additional packages on first boot.&lt;/li>
&lt;li>configure networking: update /etc/hosts, hostname, etc.&lt;/li>
&lt;li>write files: write arbitrary files to disk.&lt;/li>
&lt;li>add yum repository: add a yum repository to /etc/yum.repos.d.&lt;/li>
&lt;li>create groups and users: add groups and users to the system and set properties for them.&lt;/li>
&lt;li>run yum upgrade: upgrade all packages.&lt;/li>
&lt;li>reboot: reboot or power off when done with cloud-init.&lt;/li>
&lt;/ul>
&lt;h1 id="getting-started">Getting Started&lt;/h1>
&lt;p>The Amazon Machine Image of Photon OS has an &lt;code>ec2 datasource&lt;/code> turned on by default so an &lt;code>ec2&lt;/code> configuration is accepted.
However, for testing, the following methods provide ways to do &lt;code>cloud-init&lt;/code> with a standalone instance of Photon OS.&lt;/p>
&lt;h2 id="using-a-seed-iso">Using a Seed ISO&lt;/h2>
&lt;p>This will be using the &lt;code>nocloud&lt;/code> data source. In order to initialize the system in this way, an ISO file needs to be created with a meta-data file and an user-data file as shown below:&lt;/p>
&lt;pre>&lt;code>$ { echo instance-id: iid-local01; echo local-hostname: cloudimg; } &amp;gt; meta-data
$ printf &amp;quot;#cloud-config\nhostname: testhost\n&amp;quot; &amp;gt; user-data
$ genisoimage -output seed.iso -volid cidata -joliet -rock user-data meta-data
&lt;/code>&lt;/pre>&lt;p>Attach the &lt;code>seed.iso&lt;/code> generated above to your machine and reboot for the init to take effect.
In this case, the hostname is set to &lt;code>testhost&lt;/code>.&lt;/p>
&lt;h2 id="using-a-seed-disk-file">Using a Seed Disk File&lt;/h2>
&lt;p>To init using local disk files, do the following:&lt;/p>
&lt;pre>&lt;code>mkdir /var/lib/cloud/seed/nocloud
cd /var/lib/cloud/seed/nocloud
$ { echo instance-id: iid-local01; echo local-hostname: cloudimg; } &amp;gt; meta-data
$ printf &amp;quot;#cloud-config\nhostname: testhost\n&amp;quot; &amp;gt; user-data
&lt;/code>&lt;/pre>&lt;p>Reboot the machine and the hostname will be set to &lt;code>testhost&lt;/code>.&lt;/p>
&lt;h2 id="frequencies">Frequencies&lt;/h2>
&lt;p>Cloud-init modules have predetermined frequencies. Based on the frequency setting, multiple runs will yield different results. For the scripts to always run, remove the &lt;code>instances&lt;/code> directory before rebooting.&lt;/p>
&lt;pre>&lt;code>rm -rf /var/lib/cloud/instances
&lt;/code>&lt;/pre>&lt;h2 id="module-frequency-info">Module Frequency Info&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Frequency&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>disable_ec2_metadata&lt;/td>
&lt;td>Always&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>users_groups&lt;/td>
&lt;td>Instance&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>write_files&lt;/td>
&lt;td>Instance&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>update_hostname&lt;/td>
&lt;td>Always&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>final_message&lt;/td>
&lt;td>Always&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>resolv_conf&lt;/td>
&lt;td>Instance&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>growpart&lt;/td>
&lt;td>Always&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>update_etc_hosts&lt;/td>
&lt;td>Always&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>power_state_change&lt;/td>
&lt;td>Instance&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>phone_home&lt;/td>
&lt;td>Instance&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Cloud-Init Overview</title><link>/docs/administration-guide/cloud-init-on-photon-os/cloud-init-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/administration-guide/cloud-init-on-photon-os/cloud-init-overview/</guid><description>
&lt;p>&lt;code>cloud-init&lt;/code> is a multi-distribution package that handles early initialization of a cloud instance.&lt;/p>
&lt;p>In-depth documentation for cloud-init is available here:&lt;/p>
&lt;p>&lt;a href="https://cloudinit.readthedocs.org/en/latest/">https://cloudinit.readthedocs.org/en/latest/&lt;/a>&lt;/p>
&lt;h1 id="supported-installations">Supported installations&lt;/h1>
&lt;p>Both the full version of and the minimal version of Photon OS support cloud-init.&lt;/p>
&lt;h1 id="supported-capabilities">Supported capabilities&lt;/h1>
&lt;p>Photon OS supports the following cloud-init capabilities:&lt;/p>
&lt;ul>
&lt;li>run commands: execute a list of commands with output to console.&lt;/li>
&lt;li>configure ssh keys: add an entry to ~/.ssh/authorized_keys for the configured user.&lt;/li>
&lt;li>install package: install additional packages on first boot.&lt;/li>
&lt;li>configure networking: update /etc/hosts, hostname, etc.&lt;/li>
&lt;li>write files: write arbitrary files to disk.&lt;/li>
&lt;li>add yum repository: add a yum repository to /etc/yum.repos.d.&lt;/li>
&lt;li>create groups and users: add groups and users to the system and set properties for them.&lt;/li>
&lt;li>run yum upgrade: upgrade all packages.&lt;/li>
&lt;li>reboot: reboot or power off when done with cloud-init.&lt;/li>
&lt;/ul>
&lt;h1 id="getting-started">Getting Started&lt;/h1>
&lt;p>The Amazon Machine Image of Photon OS has an &lt;code>ec2 datasource&lt;/code> turned on by default so an &lt;code>ec2&lt;/code> configuration is accepted.
However, for testing, the following methods provide ways to do &lt;code>cloud-init&lt;/code> with a standalone instance of Photon OS.&lt;/p>
&lt;h2 id="using-a-seed-iso">Using a Seed ISO&lt;/h2>
&lt;p>This will be using the &lt;code>nocloud&lt;/code> data source. In order to initialize the system in this way, an ISO file needs to be created with a meta-data file and an user-data file as shown below:&lt;/p>
&lt;pre>&lt;code>$ { echo instance-id: iid-local01; echo local-hostname: cloudimg; } &amp;gt; meta-data
$ printf &amp;quot;#cloud-config\nhostname: testhost\n&amp;quot; &amp;gt; user-data
$ genisoimage -output seed.iso -volid cidata -joliet -rock user-data meta-data
&lt;/code>&lt;/pre>&lt;p>Attach the &lt;code>seed.iso&lt;/code> generated above to your machine and reboot for the init to take effect.
In this case, the hostname is set to &lt;code>testhost&lt;/code>.&lt;/p>
&lt;h2 id="using-a-seed-disk-file">Using a Seed Disk File&lt;/h2>
&lt;p>To init using local disk files, do the following:&lt;/p>
&lt;pre>&lt;code>mkdir /var/lib/cloud/seed/nocloud
cd /var/lib/cloud/seed/nocloud
$ { echo instance-id: iid-local01; echo local-hostname: cloudimg; } &amp;gt; meta-data
$ printf &amp;quot;#cloud-config\nhostname: testhost\n&amp;quot; &amp;gt; user-data
&lt;/code>&lt;/pre>&lt;p>Reboot the machine and the hostname will be set to &lt;code>testhost&lt;/code>.&lt;/p>
&lt;h2 id="frequencies">Frequencies&lt;/h2>
&lt;p>Cloud-init modules have predetermined frequencies. Based on the frequency setting, multiple runs will yield different results. For the scripts to always run, remove the &lt;code>instances&lt;/code> directory before rebooting.&lt;/p>
&lt;pre>&lt;code>rm -rf /var/lib/cloud/instances
&lt;/code>&lt;/pre>&lt;h2 id="module-frequency-info">Module Frequency Info&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Frequency&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>disable_ec2_metadata&lt;/td>
&lt;td>Always&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>users_groups&lt;/td>
&lt;td>Instance&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>write_files&lt;/td>
&lt;td>Instance&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>update_hostname&lt;/td>
&lt;td>Always&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>final_message&lt;/td>
&lt;td>Always&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>resolv_conf&lt;/td>
&lt;td>Instance&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>growpart&lt;/td>
&lt;td>Always&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>update_etc_hosts&lt;/td>
&lt;td>Always&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>power_state_change&lt;/td>
&lt;td>Instance&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>phone_home&lt;/td>
&lt;td>Instance&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs-V3: Combining DHCP and Static IP Addresses with IPv4 and IPv6</title><link>/docs-v3/administration-guide/managing-network-configuration/setting-up-networking-for-multiple-nics/combining-dhcp-and-static-ip-addresses-with-ipv4-and-ipv6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/administration-guide/managing-network-configuration/setting-up-networking-for-multiple-nics/combining-dhcp-and-static-ip-addresses-with-ipv4-and-ipv6/</guid><description>
&lt;p>You can combine DHCP and static IP addresses with both IPv4 and IPv6.&lt;/p>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;p>The following example shows how to use DHCP to allocate both IPv4 and IPv6 addresses:&lt;/p>
&lt;pre>&lt;code>[Network]
DHCP=yes
&lt;/code>&lt;/pre>
&lt;p>The following example shows how to use DHCP to allocate only IPv4 addresses:&lt;/p>
&lt;pre>&lt;code>[Network]
DHCP=ipv4
&lt;/code>&lt;/pre>
&lt;p>The following example shows how to use DHCP to allocate only IPv6 addresses:&lt;/p>
&lt;pre>&lt;code>[Network]
DHCP=ipv6
&lt;/code>&lt;/pre>
&lt;p>The following example shows how to use DHCP for IPv4 addresses and static IP addresses for IPv6 addresses:&lt;/p>
&lt;pre>&lt;code>[Network]
DHCP=ipv4
Address=fd00::1/48
Gateway=fd00::252
&lt;/code>&lt;/pre>
&lt;p>The following example shows how to use DHCP for IPv6 addresses and static IP addresses for IPv4:&lt;/p>
&lt;pre>&lt;code>[Network]
DHCP=ipv6
Address=10.10.10.1/24
Gateway=10.10.10.253
&lt;/code>&lt;/pre>
&lt;p>The following example shows how to use static IP addresses for both IPv4 and IPv6:&lt;/p>
&lt;pre>&lt;code>[Network]
DHCP=ipv6
Address=10.10.10.1/24
Gateway=10.10.10.253
Address=fd00::1/48
Gateway=fd00::252&lt;/code>&lt;/pre></description></item><item><title>Docs: Combining DHCP and Static IP Addresses with IPv4 and IPv6</title><link>/docs/administration-guide/managing-network-configuration/setting-up-networking-for-multiple-nics/combining-dhcp-and-static-ip-addresses-with-ipv4-and-ipv6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/administration-guide/managing-network-configuration/setting-up-networking-for-multiple-nics/combining-dhcp-and-static-ip-addresses-with-ipv4-and-ipv6/</guid><description>
&lt;p>You can combine DHCP and static IP addresses with both IPv4 and IPv6.&lt;/p>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;p>The following example shows how to use DHCP to allocate both IPv4 and IPv6 addresses:&lt;/p>
&lt;pre>&lt;code>[Network]
DHCP=yes
&lt;/code>&lt;/pre>
&lt;p>The following example shows how to use DHCP to allocate only IPv4 addresses:&lt;/p>
&lt;pre>&lt;code>[Network]
DHCP=ipv4
&lt;/code>&lt;/pre>
&lt;p>The following example shows how to use DHCP to allocate only IPv6 addresses:&lt;/p>
&lt;pre>&lt;code>[Network]
DHCP=ipv6
&lt;/code>&lt;/pre>
&lt;p>The following example shows how to use DHCP for IPv4 addresses and static IP addresses for IPv6 addresses:&lt;/p>
&lt;pre>&lt;code>[Network]
DHCP=ipv4
Address=fd00::1/48
Gateway=fd00::252
&lt;/code>&lt;/pre>
&lt;p>The following example shows how to use DHCP for IPv6 addresses and static IP addresses for IPv4:&lt;/p>
&lt;pre>&lt;code>[Network]
DHCP=ipv6
Address=10.10.10.1/24
Gateway=10.10.10.253
&lt;/code>&lt;/pre>
&lt;p>The following example shows how to use static IP addresses for both IPv4 and IPv6:&lt;/p>
&lt;pre>&lt;code>[Network]
DHCP=ipv6
Address=10.10.10.1/24
Gateway=10.10.10.253
Address=fd00::1/48
Gateway=fd00::252&lt;/code>&lt;/pre></description></item><item><title>Docs-V3: Commands to Manage Network Service</title><link>/docs-v3/administration-guide/managing-network-configuration/network-management-commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/administration-guide/managing-network-configuration/network-management-commands/</guid><description>
&lt;p>You manage the network service by using systemd commands, such as &lt;code>systemd-networkd&lt;/code>, &lt;code>systemd-resolvd&lt;/code>, and &lt;code>networkctl&lt;/code>.&lt;/p>
&lt;p>To check the status of the network service, run the following command:&lt;/p>
&lt;pre>&lt;code>systemctl status systemd-networkd
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Output&lt;/strong>&lt;/p>
&lt;pre>&lt;code>* systemd-networkd.service - Network Service
Loaded: loaded (/usr/lib/systemd/system/systemd-networkd.service; enabled; vendor preset: enabled)
Active: active (running) since Fri 2016-04-29 15:08:51 UTC; 6 days ago
Docs: man:systemd-networkd.service(8)
Main PID: 291 (systemd-network)
Status: &amp;quot;Processing requests...&amp;quot;
CGroup: /system.slice/systemd-networkd.service
`-291 /lib/systemd/systemd-networkd
&lt;/code>&lt;/pre>
&lt;p>Because Photon OS relies on systemd to manage services, you must use the &lt;code>systemd&lt;/code> suite of commands and not the deprecated &lt;code>init.d&lt;/code> commands or other deprecated commands to manage networking.&lt;/p></description></item><item><title>Docs: Commands to Manage Network Service</title><link>/docs/administration-guide/managing-network-configuration/network-management-commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/administration-guide/managing-network-configuration/network-management-commands/</guid><description>
&lt;p>You manage the network service by using systemd commands, such as &lt;code>systemd-networkd&lt;/code>, &lt;code>systemd-resolvd&lt;/code>, and &lt;code>networkctl&lt;/code>.&lt;/p>
&lt;p>To check the status of the network service, run the following command:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console"> systemctl status systemd-networkd
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Output&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console"> * systemd-networkd.service - Network Service
Loaded: loaded (/usr/lib/systemd/system/systemd-networkd.service; enabled; vendor preset: enabled)
Active: active (running) since Fri 2016-04-29 15:08:51 UTC; 6 days ago
Docs: man:systemd-networkd.service(8)
Main PID: 291 (systemd-network)
Status: &amp;quot;Processing requests...&amp;quot;
CGroup: /system.slice/systemd-networkd.service
`-291 /lib/systemd/systemd-networkd
&lt;/code>&lt;/pre>&lt;p>Because Photon OS relies on systemd to manage services, you must use the &lt;code>systemd&lt;/code> suite of commands and not the deprecated &lt;code>init.d&lt;/code> commands or other deprecated commands to manage networking.&lt;/p></description></item><item><title>Docs-V3: Common Tools</title><link>/docs-v3/troubleshooting-guide/troubleshooting-tools/common-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/troubleshooting-guide/troubleshooting-tools/common-tools/</guid><description>
&lt;p>The following are some tools that you can use to troubleshoot:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#top">top&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ps">ps&lt;/a>&lt;/li>
&lt;li>&lt;a href="#netstat">netstat&lt;/a>&lt;/li>
&lt;li>&lt;a href="#find">find&lt;/a>&lt;/li>
&lt;li>&lt;a href="#locate">locate&lt;/a>&lt;/li>
&lt;li>&lt;a href="#df">df&lt;/a>&lt;/li>
&lt;li>&lt;a href="#md5sum">md5sum&lt;/a>&lt;/li>
&lt;li>&lt;a href="#sha256sum">sha256sum&lt;/a>&lt;/li>
&lt;li>&lt;a href="#strace">strace&lt;/a>&lt;/li>
&lt;li>&lt;a href="#file">file&lt;/a>&lt;/li>
&lt;li>&lt;a href="#stat">stat&lt;/a>&lt;/li>
&lt;li>&lt;a href="#watch">watch&lt;/a>&lt;/li>
&lt;li>&lt;a href="#vmstat-and-fdisk">vmstat and fdisk&lt;/a>&lt;/li>
&lt;li>&lt;a href="#lsof">lsof&lt;/a>&lt;/li>
&lt;li>&lt;a href="#fuser">fuser&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ldd">ldd&lt;/a>&lt;/li>
&lt;li>&lt;a href="#gdb">gdb&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note&lt;/strong>: Some of the examples in this section are marked as abridged with ellipsis (&lt;code>...&lt;/code>).&lt;/p>
&lt;h2 id="top">top&lt;/h2>
&lt;p>The &lt;code>top&lt;/code> tool monitors system resources, workloads, and performance. It can unmask problems caused by processes or applications overconsuming CPUs, time, or RAM.&lt;/p>
&lt;p>To view a textual display of resource consumption, run the &lt;code>top&lt;/code> command:&lt;/p>
&lt;pre>&lt;code>top
&lt;/code>&lt;/pre>
&lt;p>Use can use &amp;lsquo;top&amp;rsquo; to kill a runaway or stalled process by typing &lt;code>k&lt;/code> followed by its process ID (PID).&lt;/p>
&lt;p>&lt;img src="images/top-in-photon-os.png" alt="Top on Photon OS">&lt;/p>
&lt;p>If the percent of CPU utilization is consistently high with little idle time, there might be a runaway process overconsuming CPUs. Restarting the service might solve the problem.&lt;/p>
&lt;p>To troubleshoot an unknown issue, run Top in the background in batch mode to write its output to a file and collect data about performance:&lt;/p>
&lt;pre>&lt;code>top d 120 b &amp;gt;&amp;gt; top120second.output
&lt;/code>&lt;/pre>
&lt;p>For a list of options that filter top output and other information, see the man page for &lt;code>top&lt;/code>.&lt;/p>
&lt;h2 id="ps">ps&lt;/h2>
&lt;p>The &lt;code>ps&lt;/code> tool shows the processes running on the machine. The &lt;code>ps&lt;/code> tool derives flexibility and power from its options, all of which are covered in the tool&amp;rsquo;s Photon OS man page:&lt;/p>
&lt;pre>&lt;code>man ps
&lt;/code>&lt;/pre>
&lt;p>You can use the following options of &lt;code>ps&lt;/code> for troubleshooting:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Show processes by user:&lt;/p>
&lt;p>&lt;code>ps aux&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Show processes and child processes by user:&lt;/p>
&lt;p>&lt;code>ps auxf&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Show processes containing the string &lt;code>ssh&lt;/code>:
&lt;code>ps aux | grep ssh&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Show processes and the command and options with which they were started:
&lt;code>ps auxww&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Example abridged output:&lt;/p>
&lt;pre>&lt;code>ps auxww
USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND
root 1 0.0 0.9 32724 3300 ? Ss 07:51 0:32 /lib/systemd/systemd --switched-root --system --deserialize 22
&lt;/code>&lt;/pre>
&lt;h2 id="netstat">netstat&lt;/h2>
&lt;p>The &lt;code>netstat&lt;/code> command can identify bottlenecks causing performance issues. It lists network connections, listening sockets, port information, and interface statistics for different protocols. Examples:&lt;/p>
&lt;pre>&lt;code>netstat --statistics
netstat --listening
&lt;/code>&lt;/pre>
&lt;h2 id="find">find&lt;/h2>
&lt;p>Use the &lt;code>find&lt;/code> command to troubleshoot a Photon OS machine that has stopped working. The following command lists the files in the root directory that have changed in the past day:&lt;/p>
&lt;pre>&lt;code> find / -mtime -1
&lt;/code>&lt;/pre>
&lt;p>See the &lt;code>find&lt;/code> &lt;a href="https://www.gnu.org/software/findutils/manual/find.html">manual&lt;/a>. Take note of the security considerations listed in the &lt;code>find&lt;/code> manual if you are using &lt;code>find&lt;/code> to troubleshoot an appliance running on Photon OS.&lt;/p>
&lt;h2 id="locate">locate&lt;/h2>
&lt;p>The &lt;code>locate&lt;/code> command is a fast way to find files and directories you onlay have a keyword. This command is similar to &lt;code>find&lt;/code> and part of the same &lt;code>findutils&lt;/code> package preinstalled on the full version of Photon OS by default. It finds file names in the file names database.&lt;/p>
&lt;p>Before you can use &lt;code>locate&lt;/code> accurately, update its database:&lt;/p>
&lt;pre>&lt;code>updatedb
&lt;/code>&lt;/pre>
&lt;p>Then run &lt;code>locate&lt;/code> to quickly find a file, such as any file name containing &lt;code>.network&lt;/code>, which can be helpful to see all the system&amp;rsquo;s &lt;code>.network&lt;/code> configuration files. The following is an abridged example:&lt;/p>
&lt;pre>&lt;code>locate .network
/etc/dbus-1/system.d/org.freedesktop.network1.conf
/etc/systemd/network/10-dhcp-en.network
/usr/lib/systemd/network/80-container-host0.network
/usr/lib/systemd/network/80-container-ve.network
/usr/lib/systemd/system/busnames.target.wants/org.freedesktop.network1.busname
/usr/lib/systemd/system/dbus-org.freedesktop.network1.service
/usr/lib/systemd/system/org.freedesktop.network1.busnname
/usr/share/dbus-1/system-services/org.freedesktop.network1.service
&lt;/code>&lt;/pre>
&lt;p>The &lt;code>locate&lt;/code> command is also a quick way to see whether a troubleshooting tool is installed on Photon OS. Examples:&lt;/p>
&lt;pre>&lt;code>locate strace
/usr/bin/strace
/usr/bin/strace-graph
/usr/bin/strace-log-merge
/usr/share/man/man1/strace.1.gz
/usr/share/vim/vim74/syntax/strace.vim
locate traceroute
&lt;/code>&lt;/pre>
&lt;p>In this example, the &lt;code>strace&lt;/code> tool is installed but &lt;code>traceroute&lt;/code> is not.&lt;/p>
&lt;p>You can install &lt;code>traceroute&lt;/code> from the Photon OS repository:&lt;/p>
&lt;pre>&lt;code>tdnf install traceroute
&lt;/code>&lt;/pre>
&lt;h2 id="df">df&lt;/h2>
&lt;p>The &lt;code>df&lt;/code> command reports the disk space available on the file system. Running out of disk space can lead an application to fail and a quick check of the available space makes sense as an early troubleshooting step:&lt;/p>
&lt;pre>&lt;code>df -h
&lt;/code>&lt;/pre>
&lt;p>The &lt;code>-h&lt;/code> option prints out the available and used space in human-readable sizes. After checking the space, you should also check the number of available inodes. Too few available inodes can lead to difficult-to-diagnose problems:&lt;/p>
&lt;pre>&lt;code>df -i
&lt;/code>&lt;/pre>
&lt;h2 id="md5sum">md5sum&lt;/h2>
&lt;p>The &lt;code>md5sum&lt;/code> tool calculates 128-bit RSA Data Security, Inc. MD5 Message Digest Algorithm hashes (a message digest, or digital signature, of a file) to uniquely identify a file and verify its integrity after file transfers, downloads, or disk errors when the security of the file is not in question.&lt;/p>
&lt;p>&lt;code>md5sum&lt;/code> can help troubleshooting installation issues by verifying that the version of Photon OS being installed matches the version on the Bintray download page. If, for instance, bytes were dropped during the download, the checksums will not match. Try downloading it again.&lt;/p>
&lt;h2 id="sha256sum">sha256sum&lt;/h2>
&lt;p>The &lt;code>sha256sum&lt;/code> tool calculates the authenticity of a file to prevent tampering when security is a concern. Photon OS also includes &lt;code>shasum&lt;/code>, &lt;code>sha1sum&lt;/code>, &lt;code>sha384sum&lt;/code>, and &lt;code>sha512sum&lt;/code>. See the man pages for &lt;code>md3sum&lt;/code>, &lt;code>sha256sum&lt;/code>, and the other SHA utilities.&lt;/p>
&lt;h2 id="strace">strace&lt;/h2>
&lt;p>The &lt;code>strace&lt;/code> utility follows system calls and signals as they are executed so that you can see what an application, command, or process is doing. &lt;code>strace&lt;/code> can trace failed commands, identify where a process obtains its configuration, monitor file activity, and find the location of a crash.&lt;/p>
&lt;p>By tracing system calls, &lt;code>strace&lt;/code> can help troubleshoot a broad range of problems, including issues with input-output, memory, interprocess communication, network usage, and application performance.&lt;/p>
&lt;p>For troubleshooting a problem that gives off few or no clues, the following command displays every system call:&lt;/p>
&lt;pre>&lt;code>strace ls -al
&lt;/code>&lt;/pre>
&lt;p>With strace commands, you can route the output to a file to make it easier to analyze:&lt;/p>
&lt;pre>&lt;code>strace -o output.txt ls -al
&lt;/code>&lt;/pre>
&lt;p>&lt;code>strace&lt;/code> can reveal the files that an application tries to open with the &lt;code>-eopen&lt;/code> option. This combination can help troubleshoot an application that is failing because it is missing files or being denied access to a file it needs. If, for example, you see &amp;ldquo;No such file or directory&amp;rdquo; in the results of &lt;code>strace -eopen&lt;/code>, something might be wrong:&lt;/p>
&lt;pre>&lt;code>strace -eopen sshd
open(&amp;quot;/usr/lib/x86_64/libpam.so.0&amp;quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open(&amp;quot;/usr/lib/libpam.so.0&amp;quot;, O_RDONLY|O_CLOEXEC) = 3
&lt;/code>&lt;/pre>
&lt;p>The results above indicate that the first file is missing because it is found in the next line. In other cases, the application might be unable to open one of its configuration files or it might be reading the wrong one. If the results say &amp;ldquo;permission denied&amp;rdquo; for one of the files, check the permissions of the file with &lt;code>ls -l&lt;/code> or &lt;code>stat&lt;/code>.&lt;/p>
&lt;p>When troubleshooting with &lt;code>strace&lt;/code>, you can include the process ID in its commands. Here&amp;rsquo;s an example of how to find a process ID:&lt;/p>
&lt;pre>&lt;code>ps -ef | grep apache
&lt;/code>&lt;/pre>
&lt;p>You can then use &lt;code>strace&lt;/code> to examine the file a process is working with:&lt;/p>
&lt;pre>&lt;code>strace -e trace=file -p 1719
&lt;/code>&lt;/pre>
&lt;p>A similar command can trace network traffic:&lt;/p>
&lt;pre>&lt;code>strace -p 812 -e trace=network
&lt;/code>&lt;/pre>
&lt;p>If an application is crashing, use &lt;code>strace&lt;/code> to trace the application and then analyze what happens right before the application crashes.&lt;/p>
&lt;p>You can also trace the child processes that an application spawns with the fork system call, and you can do so with &lt;code>systemctl&lt;/code> commands that start a process to identify why an application crashes immediately or fails to start:&lt;/p>
&lt;pre>&lt;code>strace -f -o output.txt systemctl start httpd
&lt;/code>&lt;/pre>
&lt;p>Example: If &lt;code>journalctl&lt;/code> is showing that networkd is failing, you can run strace to troubleshoot:&lt;/p>
&lt;pre>&lt;code>strace -o output.txt systemctl restart systemd-networkd
&lt;/code>&lt;/pre>
&lt;p>Then &lt;code>grep&lt;/code> inside the results for something, such as &lt;em>exit&lt;/em> or &lt;em>error&lt;/em>:&lt;/p>
&lt;pre>&lt;code>grep exit output.txt
&lt;/code>&lt;/pre>
&lt;p>If the results indicate &lt;code>systemd-resolved&lt;/code> is going wrong, you can then strace it:&lt;/p>
&lt;pre>&lt;code>strace -f -o output.txt systemctl restart systemd-resolved
&lt;/code>&lt;/pre>
&lt;h2 id="file">file&lt;/h2>
&lt;p>The &lt;code>file&lt;/code> command determines the file type, which can help troubleshoot problems when an application mistakes one type of file for another, leading it to errors. Example:&lt;/p>
&lt;pre>&lt;code>file /usr/sbin/sshd
/usr/sbin/sshd: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, stripped
&lt;/code>&lt;/pre>
&lt;h2 id="stat">stat&lt;/h2>
&lt;p>The &lt;code>stat&lt;/code> command can help troubleshoot problems with files or the file system by showing the last date it was modified and other information. Example:&lt;/p>
&lt;pre>&lt;code>stat /dev/sda1
File: '/dev/sda1'
Size: 0 Blocks: 0 IO Block: 4096 block special file
Device: 6h/6d Inode: 6614 Links: 1 Device type: 8,1
Access: (0660/brw-rw----) Uid: ( 0/ root) Gid: ( 8/ disk)
Access: 2016-09-02 12:23:56.135999936 +0000
Modify: 2016-09-02 12:23:52.879999981 +0000
Change: 2016-09-02 12:23:52.879999981 +0000
Birth: -
&lt;/code>&lt;/pre>
&lt;p>On Photon OS, &lt;code>stat&lt;/code> is handy to show permissions for a file or directory in both their absolute octal notation and their read-write-execute abbreviation; truncated example:&lt;/p>
&lt;pre>&lt;code>chmod 777 tester.md
stat tester.md
File: 'tester.md'
Size: 0 Blocks: 0 IO Block: 4096 regular empty file
Device: 801h/2049d Inode: 316385 Links: 1
Access: (0777/-rwxrwxrwx) Uid: ( 0/ root) Gid: ( 0/ root)
&lt;/code>&lt;/pre>
&lt;h2 id="watch">watch&lt;/h2>
&lt;p>The &lt;code>watch&lt;/code> utility runs a command at regular intervals so you can observe how its output changes over time. &lt;code>watch&lt;/code> can help dynamically monitor network links, routes, and other information when you are troubleshooting networking or performance issues. Examples:&lt;/p>
&lt;pre>&lt;code>watch -n0 --differences ss
watch -n1 --differences ip route
&lt;/code>&lt;/pre>
&lt;p>The following is an example with a screenshot of the output. This command monitors the traffic on your network links. The highlighted numbers are updated every second so you can see the traffic fluctuating:&lt;/p>
&lt;pre>&lt;code>watch -n1 --differences ip -s link show up
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="images/watchcmd.png" alt="The dynamic output of the watch utility">&lt;/p>
&lt;h2 id="vmstat-and-fdisk">vmstat and fdisk&lt;/h2>
&lt;p>The &lt;code>vmstat&lt;/code> tool displays statistics about virtual memory, processes, block input-output, disks, and CPU activity. This tool can help diagnose performance problems, especially system bottlenecks.&lt;/p>
&lt;p>Its output on a Photon OS virtual machine running in VMware Workstation 12 Pro without a heavy load looks like this:&lt;/p>
&lt;pre>&lt;code>vmstat
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
r b swpd free buff cache si so bi bo in cs us sy id wa st
0 0 0 5980 72084 172488 0 0 27 44 106 294 1 0 98 1 0
&lt;/code>&lt;/pre>
&lt;p>These codes are explained in the &lt;code>vmstat&lt;/code> man page.&lt;/p>
&lt;pre>&lt;code>- If `r`, the number of runnable processes, is higher than 10, the machine is under stress; consider intervening to reduce the number of processes or to distribute some of the processes to other machines. In other words, the machine has a bottleneck in executing processes.
- If `cs`, the number of context switches per second, is really high, there may be too many jobs running on the machine.
- If `in`, the number of interrupts per second, is relatively high, there might be a bottleneck for network or disk IO.
&lt;/code>&lt;/pre>
&lt;p>You can investigate disk IO further by using vmstat&amp;rsquo;s &lt;code>-d&lt;/code> option to report disk statistics. The following is an abridged example on a machine with little load:&lt;/p>
&lt;pre>&lt;code>vmstat -d
disk- ------------reads------------ ------------writes----------- -----IO------
total merged sectors ms total merged sectors ms cur sec
ram0 0 0 0 0 0 0 0 0 0 0
ram1 0 0 0 0 0 0 0 0 0 0
loop0 0 0 0 0 0 0 0 0 0 0
loop1 0 0 0 0 0 0 0 0 0 0
sr0 0 0 0 0 0 0 0 0 0 0
sda 22744 676 470604 12908 72888 24949 805224 127692 0 130
&lt;/code>&lt;/pre>
&lt;p>The &lt;code>-D&lt;/code> option summarizes disk statistics:&lt;/p>
&lt;pre>&lt;code>vmstat -D
26 disks
2 partitions
22744 total reads
676 merged reads
470604 read sectors
12908 milli reading
73040 writes
25001 merged writes
806872 written sectors
127808 milli writing
0 inprogress IO
130 milli spent IO
&lt;/code>&lt;/pre>
&lt;p>You can also get statistics about a partition. First, run the &lt;code>fdisk -l&lt;/code> command to list the machine&amp;rsquo;s devices. Then run &lt;code>vmstat -p&lt;/code> with the name of a device to view its stats:&lt;/p>
&lt;pre>&lt;code>fdisk -l
Disk /dev/ram0: 4 MiB, 4194304 bytes, 8192 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 4096 bytes
I/O size (minimum/optimal): 4096 bytes / 4096 bytes
...
Device Start End Sectors Size Type
/dev/sda1 2048 16771071 16769024 8G Linux filesystem
/dev/sda2 16771072 16777182 6111 3M BIOS boot
vmstat -p /dev/sda1
sda1 reads read sectors writes requested writes
22579 473306 78510 866088
&lt;/code>&lt;/pre>
&lt;p>See the &lt;code>vmstat&lt;/code> man page for more options.&lt;/p>
&lt;h2 id="lsof">lsof&lt;/h2>
&lt;p>The &lt;code>lsof&lt;/code> command lists open files. The tool&amp;rsquo;s definition of an open file includes directories, libraries, streams, domain sockets, and Internet sockets. THis enables it to identify the files a process is using. Because a Linux system like Photon OS uses files to do its work, you can run &lt;code>lsof&lt;/code> as root to see how the system is using them and to see how an application works.&lt;/p>
&lt;p>If you cannot unmount a disk because it is in use, you can run &lt;code>lsof&lt;/code> to identify the files on the disk that are being used.&lt;/p>
&lt;p>The following is an example that shows the processes that are using the root directory:&lt;/p>
&lt;pre>&lt;code>lsof /root
COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME
bash 879 root cwd DIR 8,1 4096 262159 /root
bash 1265 root cwd DIR 8,1 4096 262159 /root
sftp-serv 1326 root cwd DIR 8,1 4096 262159 /root
gdb 1351 root cwd DIR 8,1 4096 262159 /root
bash 1395 root cwd DIR 8,1 4096 262159 /root
lsof 1730 root cwd DIR 8,1 4096 262159 /root
&lt;/code>&lt;/pre>
&lt;p>You can do the same with an application or virtual appliance by running &lt;code>lsof&lt;/code> with the user name or process ID of the app. The following example lists the open files used by the Apache HTTP Server:&lt;/p>
&lt;pre>&lt;code>lsof -u apache
&lt;/code>&lt;/pre>
&lt;p>Running the command with the &lt;code>-i&lt;/code> option lists all the open network and Internet files, which can help troubleshoot network problems:&lt;/p>
&lt;pre>&lt;code>lsof -i
&lt;/code>&lt;/pre>
&lt;p>See the Unix socket addresses of a user like &lt;em>zookeeper&lt;/em>:&lt;/p>
&lt;pre>&lt;code>lsof -u zookeeper -U
&lt;/code>&lt;/pre>
&lt;p>The following example shows the processes running on Ports 1 through 80:&lt;/p>
&lt;pre>&lt;code>lsof -i TCP:1-80
COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME
httpd 403 root 3u IPv6 10733 0t0 TCP *:http (LISTEN)
httpd 407 apache 3u IPv6 10733 0t0 TCP *:http (LISTEN)
httpd 408 apache 3u IPv6 10733 0t0 TCP *:http (LISTEN)
httpd 409 apache 3u IPv6 10733 0t0 TCP *:http (LISTEN)
sshd 820 root 3u IPv4 11336 0t0 TCP *:ssh (LISTEN)
sshd 820 root 4u IPv6 11343 0t0 TCP *:ssh (LISTEN)
sshd 1258 root 3u IPv4 48040 0t0 TCP 198.51.100.143:ssh-&amp;gt;198.51.100.1:49759 (ESTABLISHED)
sshd 1319 root 3u IPv4 50866 0t0 TCP 198.51.100.143:ssh-&amp;gt;198.51.100.1:51054 (ESTABLISHED)
sshd 1388 root 3u IPv4 56438 0t0 TCP 198.51.100.143:ssh-&amp;gt;198.51.100.1:60335 (ESTABLISHED)
&lt;/code>&lt;/pre>
&lt;p>You can also inspect the files opened by a process ID. The following example queries the files open by the systemd network service:&lt;/p>
&lt;pre>&lt;code>lsof -p 1917
COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME
systemd-n 1917 systemd-network cwd DIR 8,1 4096 2 /
systemd-n 1917 systemd-network txt REG 8,1 887896 272389 /usr/lib/systemd/systemd-networkd
systemd-n 1917 systemd-network mem REG 8,1 270680 262267 /usr/lib/libnss_files-2.22.so
systemd-n 1917 systemd-network 0r CHR 1,3 0t0 5959 /dev/null
systemd-n 1917 systemd-network 1u unix 0x0000000000000000 0t0 45734 type=STREAM
systemd-n 1917 systemd-network 3u netlink 0t0 6867 ROUTE
systemd-n 1917 systemd-network 4u unix 0x0000000000000000 0t0 45744 type=DGRAM
systemd-n 1917 systemd-network 9u netlink 0t0 45754 KOBJECT_UEVENT
systemd-n 1917 systemd-network 12u a_inode 0,11 0 5955 [timerfd]
systemd-n 1917 systemd-network 13u IPv4 104292 0t0 UDP 198.51.100.143:bootpc
&lt;/code>&lt;/pre>
&lt;h2 id="fuser">fuser&lt;/h2>
&lt;p>The &lt;code>fuser&lt;/code> command identifies the process IDs of processes using files or sockets. The term &lt;em>process&lt;/em> is, in this case, synonymous with &lt;em>user&lt;/em>. To identify the process ID of a process using a socket, run &lt;code>fuser&lt;/code> with its namespace option and specify &lt;code>tcp&lt;/code> or &lt;code>udp&lt;/code> and the name of the process or port. Examples:&lt;/p>
&lt;pre>&lt;code>fuser -n tcp ssh
ssh/tcp: 940 1308
fuser -n tcp http
http/tcp: 592 594 595 596
fuser -n tcp 80
80/tcp: 592 594 595 596
&lt;/code>&lt;/pre>
&lt;h2 id="ldd">ldd&lt;/h2>
&lt;p>By revealing the shared libraries that a program depends on, &lt;code>ldd&lt;/code> can help troubleshoot an application that is missing a library or finding the wrong one.&lt;/p>
&lt;p>For example, if you get a &amp;ldquo;file not found&amp;rdquo; output, check the path to the library.&lt;/p>
&lt;pre>&lt;code>ldd /usr/sbin/sshd
linux-vdso.so.1 (0x00007ffc0e3e3000)
libpam.so.0 =&amp;gt; (file not found)
libcrypto.so.1.0.0 =&amp;gt; /usr/lib/libcrypto.so.1.0.0 (0x00007f624e570000)
&lt;/code>&lt;/pre>
&lt;p>You can also use the &lt;code>objdump&lt;/code> command to show dependencies for a program&amp;rsquo;s object files; example:&lt;/p>
&lt;pre>&lt;code>objdump -p /usr/sbin/sshd | grep NEEDED
&lt;/code>&lt;/pre>
&lt;h2 id="gdb">gdb&lt;/h2>
&lt;p>The &lt;code>gdb&lt;/code> tool is the GNU debugger. It lets you see inside a program while it executes or when it crashes so that you can catch errors as they occur. The &lt;code>gdb&lt;/code> tool is typically used to debug programs written in C and C++. On Photon OS, &lt;code>gdb&lt;/code> can help you determine why an application crashed. See the man page for &lt;code>gdb&lt;/code> for instructions on how to run it.&lt;/p>
&lt;p>For an extensive example on how to use &lt;code>gdb&lt;/code> to troubleshoot Photon OS running on a VM when you cannot login to Photon OS, see the section on troubleshooting boot and logon problems.&lt;/p></description></item><item><title>Docs: Common Tools</title><link>/docs/troubleshooting-guide/troubleshooting-tools/common-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/troubleshooting-guide/troubleshooting-tools/common-tools/</guid><description>
&lt;p>The following are some tools that you can use to troubleshoot:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#top">top&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ps">ps&lt;/a>&lt;/li>
&lt;li>&lt;a href="#netstat">netstat&lt;/a>&lt;/li>
&lt;li>&lt;a href="#find">find&lt;/a>&lt;/li>
&lt;li>&lt;a href="#locate">locate&lt;/a>&lt;/li>
&lt;li>&lt;a href="#df">df&lt;/a>&lt;/li>
&lt;li>&lt;a href="#md5sum">md5sum&lt;/a>&lt;/li>
&lt;li>&lt;a href="#sha256sum">sha256sum&lt;/a>&lt;/li>
&lt;li>&lt;a href="#strace">strace&lt;/a>&lt;/li>
&lt;li>&lt;a href="#file">file&lt;/a>&lt;/li>
&lt;li>&lt;a href="#stat">stat&lt;/a>&lt;/li>
&lt;li>&lt;a href="#watch">watch&lt;/a>&lt;/li>
&lt;li>&lt;a href="#vmstat-and-fdisk">vmstat and fdisk&lt;/a>&lt;/li>
&lt;li>&lt;a href="#lsof">lsof&lt;/a>&lt;/li>
&lt;li>&lt;a href="#fuser">fuser&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ldd">ldd&lt;/a>&lt;/li>
&lt;li>&lt;a href="#gdb">gdb&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note&lt;/strong>: Some of the examples in this section are marked as abridged with ellipsis (&lt;code>...&lt;/code>).&lt;/p>
&lt;h2 id="top">top&lt;/h2>
&lt;p>The &lt;code>top&lt;/code> tool monitors system resources, workloads, and performance. It can unmask problems caused by processes or applications overconsuming CPUs, time, or RAM.&lt;/p>
&lt;p>To view a textual display of resource consumption, run the &lt;code>top&lt;/code> command:&lt;/p>
&lt;pre>&lt;code>top
&lt;/code>&lt;/pre>
&lt;p>Use can use &amp;lsquo;top&amp;rsquo; to kill a runaway or stalled process by typing &lt;code>k&lt;/code> followed by its process ID (PID).&lt;/p>
&lt;p>&lt;img src="../docs/images/top-in-photon-os.png" alt="Top on Photon OS">&lt;/p>
&lt;p>If the percent of CPU utilization is consistently high with little idle time, there might be a runaway process overconsuming CPUs. Restarting the service might solve the problem.&lt;/p>
&lt;p>To troubleshoot an unknown issue, run Top in the background in batch mode to write its output to a file and collect data about performance:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">top d 120 b &amp;gt;&amp;gt; top120second.output
&lt;/code>&lt;/pre>&lt;p>For a list of options that filter top output and other information, see the man page for &lt;code>top&lt;/code>.&lt;/p>
&lt;h2 id="ps">ps&lt;/h2>
&lt;p>The &lt;code>ps&lt;/code> tool shows the processes running on the machine. The &lt;code>ps&lt;/code> tool derives flexibility and power from its options, all of which are covered in the tool&amp;rsquo;s Photon OS man page:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">man ps
&lt;/code>&lt;/pre>&lt;p>You can use the following options of &lt;code>ps&lt;/code> for troubleshooting:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Show processes by user:
&lt;code>ps aux&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Show processes and child processes by user:
&lt;code>ps auxf&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Show processes containing the string &lt;code>ssh&lt;/code>:
&lt;code>ps aux | grep ssh&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Show processes and the command and options with which they were started:
&lt;code>ps auxww&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Example abridged output:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">ps auxww
USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND
root 1 0.0 0.9 32724 3300 ? Ss 07:51 0:32 /lib/systemd/systemd --switched-root --system --deserialize 22
&lt;/code>&lt;/pre>&lt;h2 id="netstat">netstat&lt;/h2>
&lt;p>The &lt;code>netstat&lt;/code> command can identify bottlenecks causing performance issues. It lists network connections, listening sockets, port information, and interface statistics for different protocols. Examples:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">netstat --statistics
netstat --listening
&lt;/code>&lt;/pre>&lt;h2 id="find">find&lt;/h2>
&lt;p>Use the &lt;code>find&lt;/code> command to troubleshoot a Photon OS machine that has stopped working. The following command lists the files in the root directory that have changed in the past day:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">find / -mtime -1
&lt;/code>&lt;/pre>&lt;p>See the &lt;code>find&lt;/code> &lt;a href="https://www.gnu.org/software/findutils/manual/find.html">manual&lt;/a>. Take note of the security considerations listed in the &lt;code>find&lt;/code> manual if you are using &lt;code>find&lt;/code> to troubleshoot an appliance running on Photon OS.&lt;/p>
&lt;h2 id="locate">locate&lt;/h2>
&lt;p>The &lt;code>locate&lt;/code> command is a fast way to find files and directories you onlay have a keyword. This command is similar to &lt;code>find&lt;/code> and part of the same &lt;code>findutils&lt;/code> package preinstalled on the full version of Photon OS by default. It finds file names in the file names database.&lt;/p>
&lt;p>Before you can use &lt;code>locate&lt;/code> accurately, update its database:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">updatedb
&lt;/code>&lt;/pre>&lt;p>Then run &lt;code>locate&lt;/code> to quickly find a file, such as any file name containing &lt;code>.network&lt;/code>, which can be helpful to see all the system&amp;rsquo;s &lt;code>.network&lt;/code> configuration files. The following is an abridged example:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">locate .network
/etc/dbus-1/system.d/org.freedesktop.network1.conf
/etc/systemd/network/10-dhcp-en.network
/usr/lib/systemd/network/80-container-host0.network
/usr/lib/systemd/network/80-container-ve.network
/usr/lib/systemd/system/busnames.target.wants/org.freedesktop.network1.busname
/usr/lib/systemd/system/dbus-org.freedesktop.network1.service
/usr/lib/systemd/system/org.freedesktop.network1.busnname
/usr/share/dbus-1/system-services/org.freedesktop.network1.service
&lt;/code>&lt;/pre>&lt;p>The &lt;code>locate&lt;/code> command is also a quick way to see whether a troubleshooting tool is installed on Photon OS. Examples:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">locate strace
/usr/bin/strace
/usr/bin/strace-graph
/usr/bin/strace-log-merge
/usr/share/man/man1/strace.1.gz
/usr/share/vim/vim74/syntax/strace.vim
locate traceroute
&lt;/code>&lt;/pre>&lt;p>In this example, the &lt;code>strace&lt;/code> tool is installed but &lt;code>traceroute&lt;/code> is not.&lt;/p>
&lt;p>You can install &lt;code>traceroute&lt;/code> from the Photon OS repository:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">tdnf install traceroute
&lt;/code>&lt;/pre>&lt;h2 id="df">df&lt;/h2>
&lt;p>The &lt;code>df&lt;/code> command reports the disk space available on the file system. Running out of disk space can lead an application to fail and a quick check of the available space makes sense as an early troubleshooting step:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">df -h
&lt;/code>&lt;/pre>&lt;p>The &lt;code>-h&lt;/code> option prints out the available and used space in human-readable sizes. After checking the space, you should also check the number of available inodes. Too few available inodes can lead to difficult-to-diagnose problems:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">df -i
&lt;/code>&lt;/pre>&lt;h2 id="md5sum">md5sum&lt;/h2>
&lt;p>The &lt;code>md5sum&lt;/code> tool calculates 128-bit RSA Data Security, Inc. MD5 Message Digest Algorithm hashes (a message digest, or digital signature, of a file) to uniquely identify a file and verify its integrity after file transfers, downloads, or disk errors when the security of the file is not in question.&lt;/p>
&lt;p>&lt;code>md5sum&lt;/code> can help troubleshooting installation issues by verifying that the version of Photon OS being installed matches the version on the public VMware Photon Packages download page. If, for instance, bytes were dropped during the download, the checksums will not match. Try downloading it again.&lt;/p>
&lt;h2 id="sha256sum">sha256sum&lt;/h2>
&lt;p>The &lt;code>sha256sum&lt;/code> tool calculates the authenticity of a file to prevent tampering when security is a concern. Photon OS also includes &lt;code>shasum&lt;/code>, &lt;code>sha1sum&lt;/code>, &lt;code>sha384sum&lt;/code>, and &lt;code>sha512sum&lt;/code>. See the man pages for &lt;code>md3sum&lt;/code>, &lt;code>sha256sum&lt;/code>, and the other SHA utilities.&lt;/p>
&lt;h2 id="strace">strace&lt;/h2>
&lt;p>The &lt;code>strace&lt;/code> utility follows system calls and signals as they are executed so that you can see what an application, command, or process is doing. &lt;code>strace&lt;/code> can trace failed commands, identify where a process obtains its configuration, monitor file activity, and find the location of a crash.&lt;/p>
&lt;p>By tracing system calls, &lt;code>strace&lt;/code> can help troubleshoot a broad range of problems, including issues with input-output, memory, interprocess communication, network usage, and application performance.&lt;/p>
&lt;p>For troubleshooting a problem that gives off few or no clues, the following command displays every system call:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">strace ls -al
&lt;/code>&lt;/pre>&lt;p>With strace commands, you can route the output to a file to make it easier to analyze:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">strace -o output.txt ls -al
&lt;/code>&lt;/pre>&lt;p>&lt;code>strace&lt;/code> can reveal the files that an application tries to open with the &lt;code>-eopen&lt;/code> option. This combination can help troubleshoot an application that is failing because it is missing files or being denied access to a file it needs. If, for example, you see &amp;ldquo;No such file or directory&amp;rdquo; in the results of &lt;code>strace -eopen&lt;/code>, something might be wrong:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">strace -eopen sshd
open(&amp;quot;/usr/lib/x86_64/libpam.so.0&amp;quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open(&amp;quot;/usr/lib/libpam.so.0&amp;quot;, O_RDONLY|O_CLOEXEC) = 3
&lt;/code>&lt;/pre>&lt;p>The results above indicate that the first file is missing because it is found in the next line. In other cases, the application might be unable to open one of its configuration files or it might be reading the wrong one. If the results say &amp;ldquo;permission denied&amp;rdquo; for one of the files, check the permissions of the file with &lt;code>ls -l&lt;/code> or &lt;code>stat&lt;/code>.&lt;/p>
&lt;p>When troubleshooting with &lt;code>strace&lt;/code>, you can include the process ID in its commands. Here&amp;rsquo;s an example of how to find a process ID:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">ps -ef | grep apache
&lt;/code>&lt;/pre>&lt;p>You can then use &lt;code>strace&lt;/code> to examine the file a process is working with:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">strace -e trace=file -p 1719
&lt;/code>&lt;/pre>&lt;p>A similar command can trace network traffic:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">strace -p 812 -e trace=network
&lt;/code>&lt;/pre>&lt;p>If an application is crashing, use &lt;code>strace&lt;/code> to trace the application and then analyze what happens right before the application crashes.&lt;/p>
&lt;p>You can also trace the child processes that an application spawns with the fork system call, and you can do so with &lt;code>systemctl&lt;/code> commands that start a process to identify why an application crashes immediately or fails to start:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">strace -f -o output.txt systemctl start httpd
&lt;/code>&lt;/pre>&lt;p>Example: If &lt;code>journalctl&lt;/code> is showing that networkd is failing, you can run strace to troubleshoot:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">strace -o output.txt systemctl restart systemd-networkd
&lt;/code>&lt;/pre>&lt;p>Then &lt;code>grep&lt;/code> inside the results for something, such as &lt;em>exit&lt;/em> or &lt;em>error&lt;/em>:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">grep exit output.txt
&lt;/code>&lt;/pre>&lt;p>If the results indicate &lt;code>systemd-resolved&lt;/code> is going wrong, you can then strace it:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">strace -f -o output.txt systemctl restart systemd-resolved
&lt;/code>&lt;/pre>&lt;h2 id="file">file&lt;/h2>
&lt;p>The &lt;code>file&lt;/code> command determines the file type, which can help troubleshoot problems when an application mistakes one type of file for another, leading it to errors. Example:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">file /usr/sbin/sshd
/usr/sbin/sshd: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, stripped
&lt;/code>&lt;/pre>&lt;h2 id="stat">stat&lt;/h2>
&lt;p>The &lt;code>stat&lt;/code> command can help troubleshoot problems with files or the file system by showing the last date it was modified and other information. Example:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">stat /dev/sda1
File: '/dev/sda1'
Size: 0 Blocks: 0 IO Block: 4096 block special file
Device: 6h/6d Inode: 6614 Links: 1 Device type: 8,1
Access: (0660/brw-rw----) Uid: ( 0/ root) Gid: ( 8/ disk)
Access: 2016-09-02 12:23:56.135999936 +0000
Modify: 2016-09-02 12:23:52.879999981 +0000
Change: 2016-09-02 12:23:52.879999981 +0000
Birth: -
&lt;/code>&lt;/pre>&lt;p>On Photon OS, &lt;code>stat&lt;/code> is handy to show permissions for a file or directory in both their absolute octal notation and their read-write-execute abbreviation; truncated example:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">chmod 777 tester.md
stat tester.md
File: 'tester.md'
Size: 0 Blocks: 0 IO Block: 4096 regular empty file
Device: 801h/2049d Inode: 316385 Links: 1
Access: (0777/-rwxrwxrwx) Uid: ( 0/ root) Gid: ( 0/ root)
&lt;/code>&lt;/pre>&lt;h2 id="watch">watch&lt;/h2>
&lt;p>The &lt;code>watch&lt;/code> utility runs a command at regular intervals so you can observe how its output changes over time. &lt;code>watch&lt;/code> can help dynamically monitor network links, routes, and other information when you are troubleshooting networking or performance issues. Examples:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">watch -n0 --differences ss
watch -n1 --differences ip route
&lt;/code>&lt;/pre>&lt;p>The following is an example with a screenshot of the output. This command monitors the traffic on your network links. The highlighted numbers are updated every second so you can see the traffic fluctuating:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">watch -n1 --differences ip -s link show up
&lt;/code>&lt;/pre>&lt;p>&lt;img src="../docs/images/watchcmd.png" alt="The dynamic output of the watch utility">&lt;/p>
&lt;h2 id="vmstat-and-fdisk">vmstat and fdisk&lt;/h2>
&lt;p>The &lt;code>vmstat&lt;/code> tool displays statistics about virtual memory, processes, block input-output, disks, and CPU activity. This tool can help diagnose performance problems, especially system bottlenecks.&lt;/p>
&lt;p>Its output on a Photon OS virtual machine running in VMware Workstation 12 Pro without a heavy load looks like this:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">vmstat
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
r b swpd free buff cache si so bi bo in cs us sy id wa st
0 0 0 5980 72084 172488 0 0 27 44 106 294 1 0 98 1 0
&lt;/code>&lt;/pre>&lt;p>These codes are explained in the &lt;code>vmstat&lt;/code> man page.&lt;/p>
&lt;ul>
&lt;li>If &lt;code>r&lt;/code>, the number of runnable processes, is higher than 10, the machine is under stress; consider intervening to reduce the number of processes or to distribute some of the processes to other machines. In other words, the machine has a bottleneck in executing processes.&lt;/li>
&lt;li>If &lt;code>cs&lt;/code>, the number of context switches per second, is really high, there may be too many jobs running on the machine.&lt;/li>
&lt;li>If &lt;code>in&lt;/code>, the number of interrupts per second, is relatively high, there might be a bottleneck for network or disk IO.&lt;/li>
&lt;/ul>
&lt;p>You can investigate disk IO further by using vmstat&amp;rsquo;s &lt;code>-d&lt;/code> option to report disk statistics. The following is an abridged example on a machine with little load:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">vmstat -d
disk- ------------reads------------ ------------writes----------- -----IO------
total merged sectors ms total merged sectors ms cur sec
ram0 0 0 0 0 0 0 0 0 0 0
ram1 0 0 0 0 0 0 0 0 0 0
loop0 0 0 0 0 0 0 0 0 0 0
loop1 0 0 0 0 0 0 0 0 0 0
sr0 0 0 0 0 0 0 0 0 0 0
sda 22744 676 470604 12908 72888 24949 805224 127692 0 130
&lt;/code>&lt;/pre>&lt;p>The &lt;code>-D&lt;/code> option summarizes disk statistics:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">vmstat -D
26 disks
2 partitions
22744 total reads
676 merged reads
470604 read sectors
12908 milli reading
73040 writes
25001 merged writes
806872 written sectors
127808 milli writing
0 inprogress IO
130 milli spent IO
&lt;/code>&lt;/pre>&lt;p>You can also get statistics about a partition. First, run the &lt;code>fdisk -l&lt;/code> command to list the machine&amp;rsquo;s devices. Then run &lt;code>vmstat -p&lt;/code> with the name of a device to view its stats:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">fdisk -l
Disk /dev/ram0: 4 MiB, 4194304 bytes, 8192 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 4096 bytes
I/O size (minimum/optimal): 4096 bytes / 4096 bytes
...
Device Start End Sectors Size Type
/dev/sda1 2048 16771071 16769024 8G Linux filesystem
/dev/sda2 16771072 16777182 6111 3M BIOS boot
vmstat -p /dev/sda1
sda1 reads read sectors writes requested writes
22579 473306 78510 866088
&lt;/code>&lt;/pre>&lt;p>See the &lt;code>vmstat&lt;/code> man page for more options.&lt;/p>
&lt;h2 id="lsof">lsof&lt;/h2>
&lt;p>The &lt;code>lsof&lt;/code> command lists open files. The tool&amp;rsquo;s definition of an open file includes directories, libraries, streams, domain sockets, and Internet sockets. THis enables it to identify the files a process is using. Because a Linux system like Photon OS uses files to do its work, you can run &lt;code>lsof&lt;/code> as root to see how the system is using them and to see how an application works.&lt;/p>
&lt;p>If you cannot unmount a disk because it is in use, you can run &lt;code>lsof&lt;/code> to identify the files on the disk that are being used.&lt;/p>
&lt;p>The following is an example that shows the processes that are using the root directory:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">lsof /root
COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME
bash 879 root cwd DIR 8,1 4096 262159 /root
bash 1265 root cwd DIR 8,1 4096 262159 /root
sftp-serv 1326 root cwd DIR 8,1 4096 262159 /root
gdb 1351 root cwd DIR 8,1 4096 262159 /root
bash 1395 root cwd DIR 8,1 4096 262159 /root
lsof 1730 root cwd DIR 8,1 4096 262159 /root
&lt;/code>&lt;/pre>&lt;p>You can do the same with an application or virtual appliance by running &lt;code>lsof&lt;/code> with the user name or process ID of the app. The following example lists the open files used by the Apache HTTP Server:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">lsof -u apache
&lt;/code>&lt;/pre>&lt;p>Running the command with the &lt;code>-i&lt;/code> option lists all the open network and Internet files, which can help troubleshoot network problems:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">lsof -i
&lt;/code>&lt;/pre>&lt;p>See the Unix socket addresses of a user like &lt;em>zookeeper&lt;/em>:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">lsof -u zookeeper -U
&lt;/code>&lt;/pre>&lt;p>The following example shows the processes running on Ports 1 through 80:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">lsof -i TCP:1-80
COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME
httpd 403 root 3u IPv6 10733 0t0 TCP *:http (LISTEN)
httpd 407 apache 3u IPv6 10733 0t0 TCP *:http (LISTEN)
httpd 408 apache 3u IPv6 10733 0t0 TCP *:http (LISTEN)
httpd 409 apache 3u IPv6 10733 0t0 TCP *:http (LISTEN)
sshd 820 root 3u IPv4 11336 0t0 TCP *:ssh (LISTEN)
sshd 820 root 4u IPv6 11343 0t0 TCP *:ssh (LISTEN)
sshd 1258 root 3u IPv4 48040 0t0 TCP 198.51.100.143:ssh-&amp;gt;198.51.100.1:49759 (ESTABLISHED)
sshd 1319 root 3u IPv4 50866 0t0 TCP 198.51.100.143:ssh-&amp;gt;198.51.100.1:51054 (ESTABLISHED)
sshd 1388 root 3u IPv4 56438 0t0 TCP 198.51.100.143:ssh-&amp;gt;198.51.100.1:60335 (ESTABLISHED)
&lt;/code>&lt;/pre>&lt;p>You can also inspect the files opened by a process ID. The following example queries the files open by the systemd network service:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">lsof -p 1917
COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME
systemd-n 1917 systemd-network cwd DIR 8,1 4096 2 /
systemd-n 1917 systemd-network txt REG 8,1 887896 272389 /usr/lib/systemd/systemd-networkd
systemd-n 1917 systemd-network mem REG 8,1 270680 262267 /usr/lib/libnss_files-2.22.so
systemd-n 1917 systemd-network 0r CHR 1,3 0t0 5959 /dev/null
systemd-n 1917 systemd-network 1u unix 0x0000000000000000 0t0 45734 type=STREAM
systemd-n 1917 systemd-network 3u netlink 0t0 6867 ROUTE
systemd-n 1917 systemd-network 4u unix 0x0000000000000000 0t0 45744 type=DGRAM
systemd-n 1917 systemd-network 9u netlink 0t0 45754 KOBJECT_UEVENT
systemd-n 1917 systemd-network 12u a_inode 0,11 0 5955 [timerfd]
systemd-n 1917 systemd-network 13u IPv4 104292 0t0 UDP 198.51.100.143:bootpc
&lt;/code>&lt;/pre>&lt;h2 id="fuser">fuser&lt;/h2>
&lt;p>The &lt;code>fuser&lt;/code> command identifies the process IDs of processes using files or sockets. The term &lt;em>process&lt;/em> is, in this case, synonymous with &lt;em>user&lt;/em>. To identify the process ID of a process using a socket, run &lt;code>fuser&lt;/code> with its namespace option and specify &lt;code>tcp&lt;/code> or &lt;code>udp&lt;/code> and the name of the process or port. Examples:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">fuser -n tcp ssh
ssh/tcp: 940 1308
fuser -n tcp http
http/tcp: 592 594 595 596
fuser -n tcp 80
80/tcp: 592 594 595 596
&lt;/code>&lt;/pre>&lt;h2 id="ldd">ldd&lt;/h2>
&lt;p>By revealing the shared libraries that a program depends on, &lt;code>ldd&lt;/code> can help troubleshoot an application that is missing a library or finding the wrong one.&lt;/p>
&lt;p>For example, if you get a &amp;ldquo;file not found&amp;rdquo; output, check the path to the library.&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">ldd /usr/sbin/sshd
linux-vdso.so.1 (0x00007ffc0e3e3000)
libpam.so.0 =&amp;gt; (file not found)
libcrypto.so.1.0.0 =&amp;gt; /usr/lib/libcrypto.so.1.0.0 (0x00007f624e570000)
&lt;/code>&lt;/pre>&lt;p>You can also use the &lt;code>objdump&lt;/code> command to show dependencies for a program&amp;rsquo;s object files; example:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">objdump -p /usr/sbin/sshd | grep NEEDED
&lt;/code>&lt;/pre>&lt;h2 id="gdb">gdb&lt;/h2>
&lt;p>The &lt;code>gdb&lt;/code> tool is the GNU debugger. It lets you see inside a program while it executes or when it crashes so that you can catch errors as they occur. The &lt;code>gdb&lt;/code> tool is typically used to debug programs written in C and C++. On Photon OS, &lt;code>gdb&lt;/code> can help you determine why an application crashed. See the man page for &lt;code>gdb&lt;/code> for instructions on how to run it.&lt;/p>
&lt;p>For an extensive example on how to use &lt;code>gdb&lt;/code> to troubleshoot Photon OS running on a VM when you cannot login to Photon OS, see the section on troubleshooting boot and logon problems.&lt;/p></description></item><item><title>Docs-V3: Default Firewall Settings</title><link>/docs-v3/administration-guide/security-policy/default-firewall-settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/administration-guide/security-policy/default-firewall-settings/</guid><description>
&lt;p>The design of Photon OS emphasizes security. On the minimal and full versions of Photon OS, the default security policy turns on the firewall and drops packets from external interfaces and applications. As a result, you might need to add rules to iptables to permit forwarding, allow protocols like HTTP, and open ports. You must configure the firewall for your applications and requirements.&lt;/p>
&lt;p>The default iptables on the full version have the following settings:&lt;/p>
&lt;pre>&lt;code>iptables --list
Chain INPUT (policy DROP)
target prot opt source destination
ACCEPT all -- anywhere anywhere
ACCEPT all -- anywhere anywhere ctstate RELATED,ESTABLISHED
ACCEPT tcp -- anywhere anywhere tcp dpt:ssh
Chain FORWARD (policy DROP)
target prot opt source destination
Chain OUTPUT (policy DROP)
target prot opt source destination
ACCEPT all -- anywhere anywhere
&lt;/code>&lt;/pre>
&lt;p>For more information on how to change the settings, see the man page for iptables.&lt;/p>
&lt;p>Although the default iptables policy accepts SSH connections, the &lt;code>sshd&lt;/code> configuration file on the full version of Photon OS is set to reject SSH connections. See &lt;a href="../../../troubleshooting-guide/solutions-to-common-problems/permitting-root-login-with-ssh/">Permitting Root Login with SSH&lt;/a>.&lt;/p>
&lt;p>If you are unable to ping a Photon OS machine, check the firewall rules. To verify if the rules allow connectivity for the port and protocol, change the &lt;code>iptables&lt;/code> commands by using &lt;code>lsof&lt;/code> commands to see the processes listening on ports:&lt;/p>
&lt;pre>&lt;code>lsof -i -P -n&lt;/code>&lt;/pre></description></item><item><title>Docs: Default Firewall Settings</title><link>/docs/administration-guide/security-policy/default-firewall-settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/administration-guide/security-policy/default-firewall-settings/</guid><description>
&lt;p>The design of Photon OS emphasizes security. On the minimal and full versions of Photon OS, the default security policy turns on the firewall and drops packets from external interfaces and applications. As a result, you might need to add rules to iptables to permit forwarding, allow protocols like HTTP, and open ports. You must configure the firewall for your applications and requirements.&lt;/p>
&lt;p>The default iptables on the full version have the following settings:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">iptables --list
Chain INPUT (policy DROP)
target prot opt source destination
ACCEPT all -- anywhere anywhere
ACCEPT all -- anywhere anywhere ctstate RELATED,ESTABLISHED
ACCEPT tcp -- anywhere anywhere tcp dpt:ssh
Chain FORWARD (policy DROP)
target prot opt source destination
Chain OUTPUT (policy DROP)
target prot opt source destination
ACCEPT all -- anywhere anywhere
&lt;/code>&lt;/pre>&lt;p>For more information on how to change the settings, see the man page for iptables.&lt;/p>
&lt;p>Although the default iptables policy accepts SSH connections, the &lt;code>sshd&lt;/code> configuration file on the full version of Photon OS is set to reject SSH connections. See &lt;a href="../docs/troubleshooting-guide/solutions-to-common-problems/permitting-root-login-with-ssh/">Permitting Root Login with SSH&lt;/a>.&lt;/p>
&lt;p>If you are unable to ping a Photon OS machine, check the firewall rules. To verify if the rules allow connectivity for the port and protocol, change the &lt;code>iptables&lt;/code> commands by using &lt;code>lsof&lt;/code> commands to see the processes listening on ports:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console"> lsof -i -P -n
&lt;/code>&lt;/pre></description></item><item><title>Docs-V3: Docker Containers</title><link>/docs-v3/administration-guide/containers/docker-containers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/administration-guide/containers/docker-containers/</guid><description>
&lt;p>On Photon OS, the Docker daemon is enabled by default. To view the status of the daemon, run the following command:&lt;/p>
&lt;pre>&lt;code>systemctl status docker
&lt;/code>&lt;/pre>
&lt;p>Docker is loaded and running by default on the full version of Photon OS. On the minimal version, it is loaded but not running by default. To start it, run the following command:&lt;/p>
&lt;pre>&lt;code>systemctl start docker
&lt;/code>&lt;/pre>
&lt;p>To obtain information about Docker, run the following command as root:&lt;/p>
&lt;pre>&lt;code>docker info
&lt;/code>&lt;/pre>
&lt;p>After Docker is enabled and started, you can create a container. For example, run the following docker command as root to create a container running Ubuntu 14.04 with an interactive terminal shell:&lt;/p>
&lt;pre>&lt;code>docker run -i -t ubuntu:14.04 /bin/bash
&lt;/code>&lt;/pre>
&lt;p>Photon OS also enables you to run a docker container that runs Photon OS:&lt;/p>
&lt;pre>&lt;code>docker run -i -t photon /bin/bash
&lt;/code>&lt;/pre></description></item><item><title>Docs: Docker Containers</title><link>/docs/administration-guide/containers/docker-containers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/administration-guide/containers/docker-containers/</guid><description>
&lt;p>On Photon OS, the Docker daemon is enabled by default. To view the status of the daemon, run the following command:&lt;/p>
&lt;pre>&lt;code>systemctl status docker
&lt;/code>&lt;/pre>
&lt;p>Docker is loaded and running by default on the full version of Photon OS. On the minimal version, it is loaded but not running by default. To start it, run the following command:&lt;/p>
&lt;pre>&lt;code>systemctl start docker
&lt;/code>&lt;/pre>
&lt;p>To obtain information about Docker, run the following command as root:&lt;/p>
&lt;pre>&lt;code>docker info
&lt;/code>&lt;/pre>
&lt;p>After Docker is enabled and started, you can create a container. For example, run the following docker command as root to create a container running Ubuntu 14.04 with an interactive terminal shell:&lt;/p>
&lt;pre>&lt;code>docker run -i -t ubuntu:14.04 /bin/bash
&lt;/code>&lt;/pre>
&lt;p>Photon OS also enables you to run a docker container that runs Photon OS:&lt;/p>
&lt;pre>&lt;code>docker run -i -t photon /bin/bash
&lt;/code>&lt;/pre></description></item><item><title>Docs-V3: Downloading Photon OS</title><link>/docs-v3/installation-guide/downloading-photon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/installation-guide/downloading-photon/</guid><description>
&lt;p>You download Photon OS from &lt;a href="https://github.com/vmware/photon/wiki/Downloading-Photon-OS">https://github.com/vmware/photon/wiki/Downloading-Photon-OS&lt;/a>&lt;/p>
&lt;p>Photon OS is available in the following pre-packaged, binary formats.&lt;/p>
&lt;h2 id="download-formats">Download Formats&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Format&lt;/td>
&lt;td>Description&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ISO Image&lt;/td>
&lt;td>Contains everything needed to install either the minimal or full installation of Photon OS. The bootable ISO has a manual installer or can be used with PXE/kickstart environments for automated installations.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>OVA&lt;/td>
&lt;td>Pre-installed minimal environment, customized for VMware hypervisor environments. These customizations include a highly sanitized and optimized kernel to give improved boot and runtime performance for containers and Linux applications. Since an OVA is a complete virtual machine definition, we&amp;rsquo;ve made available a Photon OS OVA that has virtual hardware version 11; this will allow for compatibility with several versions of VMware platforms or allow for the latest and greatest virtual hardware enhancements.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Amazon AMI&lt;/td>
&lt;td>Pre-packaged and tested version of Photon OS made ready to deploy in your Amazon EC2 cloud environment. Previously, we&amp;rsquo;d published documentation on how to create an Amazon compatible instance, but, now we&amp;rsquo;ve done the work for you.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Google GCE Image&lt;/td>
&lt;td>Pre-packaged and tested Google GCE image that is ready to deploy in your Google Compute Engine Environment, with all modifications and package requirements for running Photon OS in GCE.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Azure VHD&lt;/td>
&lt;td>Pre-packaged and tested Azure HD image that is ready to deploy in your Microsoft Azure Cloud, with all modifications and package requirements for running Photon OS in Azure.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Downloading Photon OS</title><link>/docs/installation-guide/downloading-photon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/installation-guide/downloading-photon/</guid><description>
&lt;p>Detailed instructions for obtaining Photon OS 4.0 are located at: &lt;a href="https://github.com/vmware/photon/wiki/Downloading-Photon-OS">https://github.com/vmware/photon/wiki/Downloading-Photon-OS&lt;/a>&lt;/p>
&lt;h2 id="download-formats">Download Formats&lt;/h2>
&lt;p>Photon OS is available in the following pre-packaged, binary formats:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Format&lt;/td>
&lt;td>Description&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img width=1000 class="px-5"/>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://packages.vmware.com/photon/4.0/GA/iso/">ISO Image&lt;/a>&lt;/td>
&lt;td>Contains everything needed to install the minimal or full installation of Photon OS or the Real-Time flavor of Photon OS. The bootable ISO has a manual installer or can be used with PXE/kickstart environments for automated installations.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://packages.vmware.com/photon/4.0/GA/ova/">OVA&lt;/a>&lt;/td>
&lt;td>Pre-installed minimal environment, customized for VMware hypervisor environments. These customizations include a highly sanitized and optimized kernel to give improved boot and runtime performance for containers and Linux applications. Since an OVA is a complete virtual machine definition, we&amp;rsquo;ve made available a Photon OS OVA that has virtual hardware version 13 arm64, version 13, and version 11; this will allow for compatibility with several versions of VMware platforms or allow for the latest and greatest virtual hardware enhancements.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://packages.vmware.com/photon/4.0/GA/ami/">Amazon AMI&lt;/a>&lt;/td>
&lt;td>Pre-packaged and tested version of Photon OS with Amazon AMI and Amazon AMI arm64 packages made ready to deploy in your Amazon EC2 cloud environment. Previously, we&amp;rsquo;d published documentation on how to create an Amazon compatible instance, but, now we&amp;rsquo;ve done the work for you.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://packages.vmware.com/photon/4.0/GA/gce/">Google GCE Image&lt;/a>&lt;/td>
&lt;td>Pre-packaged and tested Google GCE image that is ready to deploy in your Google Compute Engine Environment, with all modifications and package requirements for running Photon OS in GCE.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://packages.vmware.com/photon/4.0/GA/azure/">Azure VHD&lt;/a>&lt;/td>
&lt;td>Pre-packaged and tested Azure HD image that is ready to deploy in your Microsoft Azure Cloud, with all modifications and package requirements for running Photon OS in Azure.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://packages.vmware.com/photon/4.0/GA/rpi/">Raspberry Pi Image&lt;/a>&lt;/td>
&lt;td>Pre-packaged and tested Raspberry Pi Image on ARM64 architecture.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Enabling 'systemd' Debug Shell During Boot</title><link>/docs/troubleshooting-guide/troubleshooting-with-systemd/enabling-systemd-debug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/troubleshooting-guide/troubleshooting-with-systemd/enabling-systemd-debug/</guid><description>
&lt;p>To diagnose &lt;code>systemd&lt;/code> related boot issues, you can enable early shell access during boot.&lt;/p>
&lt;p>Perform the following steps to enable early shell access:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Restart the Photon OS machine or the virtual machine running Photon OS.&lt;/p>
&lt;p>When the Photon OS splash screen appears, as it restarts, type the letter &lt;code>e&lt;/code> quickly.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Append &lt;code>systemd.debug-shell=1&lt;/code> to the kernel command line.&lt;/p>
&lt;p>Optionally, to change logging level to debug, you can append &lt;code>systemd.log_level=debug&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Press &lt;code>F10&lt;/code> to proceed with the boot.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Press &lt;code>Alt+Ctrl+F9&lt;/code> to switch to &lt;code>tty9&lt;/code> to access the debug shell.&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Docs-V3: Enabling `systemd` Debug Shell During Boot</title><link>/docs-v3/troubleshooting-guide/troubleshooting-with-systemd/enabling-systemd-debug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/troubleshooting-guide/troubleshooting-with-systemd/enabling-systemd-debug/</guid><description>
&lt;p>To diagnose &lt;code>systemd&lt;/code> related boot issues, you can enable early shell access during boot.&lt;/p>
&lt;p>Perform the following steps to enable early shell access:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Restart the Photon OS machine or the virtual machine running Photon OS.&lt;/p>
&lt;p>When the Photon OS splash screen appears, as it restarts, type the letter &lt;code>e&lt;/code> quickly.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Append &lt;code>systemd.debug-shell=1&lt;/code> to the kernel command line.&lt;/p>
&lt;p>Optionally, to change logging level to debug, you can append &lt;code>systemd.log_level=debug&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Press &lt;code>F10&lt;/code> to proceed with the boot.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Press &lt;code>Alt+Ctrl+F9&lt;/code> to switch to &lt;code>tty9&lt;/code> to access the debug shell.&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Docs-V3: Examining the Packages in the SPECS Directory on Github</title><link>/docs-v3/administration-guide/photon-os-packages/examining-packages-spec-dir/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/administration-guide/photon-os-packages/examining-packages-spec-dir/</guid><description>
&lt;p>The SPECS directory of the GitHub website for Photon OS contains all the packages that can appear in Photon OS repositories. The following is the path to the SPECS directory :&lt;/p>
&lt;p>&lt;code>https://github.com/vmware/photon/tree/master/SPECS&lt;/code>&lt;/p>
&lt;p>To see the version of a package, in the SPECS directory, click the name of the subdirectory of the package that you want to examine, and then click the &lt;code>.spec&lt;/code> filename in the subdirectory.&lt;/p>
&lt;p>For example, the version of OpenJDK, which contains the openjre package that installs the Java class library and the javac Java compiler appears as follows:&lt;/p>
&lt;pre>&lt;code>%define _use_internal_dependency_generator 0
Summary: OpenJDK
Name: openjdk
Version: 1.8.0.72
Release: 1%{?dist}
License: GNU GPL
URL: https://openjdk.java.net
Group: Development/Tools
Vendor: VMware, Inc.
Distribution: Photon
AutoReqProv: no
Source0: http://anduin.linuxfromscratch.org/files/BLFS/OpenJDK-%{version}/OpenJDK-%{version}-x86_64-bin.tar.xz
%define sha1 OpenJDK=0c705d7b13f4e22611d2da654209f469a6297f26
%description
The OpenJDK package installs java class library and javac java compiler.
%package -n openjre
Summary: Jave runtime environment
AutoReqProv: no
%description -n openjre
It contains the libraries files for Java runtime environment
#%global __requires_exclude ^libgif.*$
#%filter_from_requires ^libgif.*$...
&lt;/code>&lt;/pre></description></item><item><title>Docs: Examining the Packages in the SPECS Directory on Github</title><link>/docs/administration-guide/photon-os-packages/examining-packages-spec-dir/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/administration-guide/photon-os-packages/examining-packages-spec-dir/</guid><description>
&lt;p>The SPECS directory of the GitHub website for Photon OS contains all the packages that can appear in Photon OS repositories. The following is the path to the SPECS directory :&lt;/p>
&lt;p>&lt;code>https://github.com/vmware/photon/tree/master/SPECS&lt;/code>&lt;/p>
&lt;p>To see the version of a package, in the SPECS directory, click the name of the subdirectory of the package that you want to examine, and then click the &lt;code>.spec&lt;/code> filename in the subdirectory.&lt;/p>
&lt;p>For example, the version of OpenJDK, which contains the openjre package that installs the Java class library and the javac Java compiler appears as follows:&lt;/p>
&lt;pre>&lt;code>%define _use_internal_dependency_generator 0
Summary: OpenJDK
Name: openjdk
Version: 1.8.0.72
Release: 1%{?dist}
License: GNU GPL
URL: https://openjdk.java.net
Group: Development/Tools
Vendor: VMware, Inc.
Distribution: Photon
AutoReqProv: no
Source0: http://anduin.linuxfromscratch.org/files/BLFS/OpenJDK-%{version}/OpenJDK-%{version}-x86_64-bin.tar.xz
%define sha1 OpenJDK=0c705d7b13f4e22611d2da654209f469a6297f26
%description
The OpenJDK package installs java class library and javac java compiler.
%package -n openjre
Summary: Jave runtime environment
AutoReqProv: no
%description -n openjre
It contains the libraries files for Java runtime environment
#%global __requires_exclude ^libgif.*$
#%filter_from_requires ^libgif.*$...
&lt;/code>&lt;/pre></description></item><item><title>Docs-V3: Folder Layout</title><link>/docs-v3/installation-guide/build-iso-from-source/folder-layout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/installation-guide/build-iso-from-source/folder-layout/</guid><description>
&lt;p>The structure of the directories on GitHub that contain the source code for Photon OS is as follows:&lt;/p>
&lt;pre>&lt;code>photon/
├── Makefile
├── README
├── Dockerfile
├── Vagrantfile
├── SPECS # RPM SPEC files
├── common # Build, packaging config
├── docs # Documentation
├── installer # Installer used at runtime
├── support # Build scripts
└── tools
&lt;/code>&lt;/pre></description></item><item><title>Docs: Folder Layout</title><link>/docs/installation-guide/building-images/folder-layout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/installation-guide/building-images/folder-layout/</guid><description>
&lt;p>The structure of the directories on GitHub that contain the source code for Photon OS is as follows:&lt;/p>
&lt;pre>&lt;code>photon/
├── Makefile
├── README
├── Dockerfile
├── Vagrantfile
├── PUBLISHRPMS_SPECS # RPM SPEC files
├── SPECS # RPM SPEC files
├── common # Build, packaging config
├── docs # Documentation
├── build.py # Package builder
├── config.json # Package builder
├── support # Build scripts
└── tools
&lt;/code>&lt;/pre></description></item><item><title>Docs-V3: General Performance Guidelines</title><link>/docs-v3/troubleshooting-guide/performance-issues/general_performance_guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/troubleshooting-guide/performance-issues/general_performance_guidelines/</guid><description>
&lt;p>If you have no indication what the cause of a performance degradation might be, start by getting a high-level picture of the system&amp;rsquo;s state. Then look for signs in the data that might point to a cause.&lt;/p>
&lt;p>Use the following guidelines to gain insight into performance data:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Start with the &lt;code>systemd journal&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>top&lt;/code> tool can unmask problems caused by processes or applications overconsuming CPUs, time, or RAM. If the percent of CPU utilization is consistently high with little idle time, for example, there might be a runaway process. Restart it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>netstat --statistics&lt;/code> command can identify bottlenecks causing performance issues. It lists interface statistics for different protocols.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If &lt;code>top&lt;/code> and &lt;code>netstat&lt;/code> reveal no errors, run the &lt;code>strace ls -al&lt;/code> to view every system call.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>watch&lt;/code> command can help dynamically monitor a command to help troubleshoot performance issues:&lt;/p>
&lt;p>&lt;code>watch -n0 --differences &amp;lt;command&amp;gt;&lt;/code>&lt;/p>
&lt;p>You can also combine &lt;code>watch&lt;/code> with the &lt;code>vmstat&lt;/code> command to dig deeper into statistics about virtual memory, processes, block input-output, disks, and CPU activity. Are there any bottlenecks?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can use the &lt;code>dstat&lt;/code> utility to see the live, running list of statistics about system resources.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>systemd-analyze&lt;/code> reveals performance statistics for boot time and can help troubleshoot slow system boots and incorrect unit files.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The additional tools that you select depend on the clues that your initial investigation reveals. The following tools can also help troubleshoot performance: &lt;code>sysstat&lt;/code>, &lt;code>sar&lt;/code>, &lt;code>systemtap&lt;/code>, and &lt;code>crash&lt;/code>.&lt;/p></description></item><item><title>Docs: General Performance Guidelines</title><link>/docs/troubleshooting-guide/performance-issues/general_performance_guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/troubleshooting-guide/performance-issues/general_performance_guidelines/</guid><description>
&lt;p>If you have no indication what the cause of a performance degradation might be, start by getting a high-level picture of the system&amp;rsquo;s state. Then look for signs in the data that might point to a cause.&lt;/p>
&lt;p>Use the following guidelines to gain insight into performance data:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Start with the &lt;code>systemd journal&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>top&lt;/code> tool can unmask problems caused by processes or applications overconsuming CPUs, time, or RAM. If the percent of CPU utilization is consistently high with little idle time, for example, there might be a runaway process. Restart it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>netstat --statistics&lt;/code> command can identify bottlenecks causing performance issues. It lists interface statistics for different protocols.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If &lt;code>top&lt;/code> and &lt;code>netstat&lt;/code> reveal no errors, run the &lt;code>strace ls -al&lt;/code> to view every system call.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>watch&lt;/code> command can help dynamically monitor a command to help troubleshoot performance issues:&lt;/p>
&lt;p>&lt;code>watch -n0 --differences &amp;lt;command&amp;gt;&lt;/code>&lt;/p>
&lt;p>You can also combine &lt;code>watch&lt;/code> with the &lt;code>vmstat&lt;/code> command to dig deeper into statistics about virtual memory, processes, block input-output, disks, and CPU activity. Are there any bottlenecks?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can use the &lt;code>dstat&lt;/code> utility to see the live, running list of statistics about system resources.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>systemd-analyze&lt;/code> reveals performance statistics for boot time and can help troubleshoot slow system boots and incorrect unit files.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The additional tools that you select depend on the clues that your initial investigation reveals. The following tools can also help troubleshoot performance: &lt;code>sysstat&lt;/code>, &lt;code>sar&lt;/code>, &lt;code>systemtap&lt;/code>, and &lt;code>crash&lt;/code>.&lt;/p></description></item><item><title>Docs-V3: Installing Photon OS on Dell Edge Gateway 300X</title><link>/docs-v3/installation-guide/install-photon-on-dell-gateway/installing-photon-os-on-dell-300x/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/installation-guide/install-photon-on-dell-gateway/installing-photon-os-on-dell-300x/</guid><description>
&lt;p>You can install Photon OS 3.0 on Dell Gateway 300X. You can download Photon OS as an ISO file and install it.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#prerequisites">Prerequisites&lt;/a>&lt;/li>
&lt;li>&lt;a href="#installing-the-iso-image-for-photon-os">Installing the ISO Image for Photon OS&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ol>
&lt;li>Verify that you have the following resources:
&lt;ul>
&lt;li>Dell Edge Gateway 300x.&lt;/li>
&lt;li>USB pen drive. Format the pen drive with FAT32 with at least 8 GB of space.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Download the Photon OS ISO image from &lt;a href="https://bintray.com/vmware/photon/">Bintray&lt;/a>.&lt;/li>
&lt;/ol>
&lt;h2 id="installing-the-iso-image-for-photon-os">Installing the ISO Image for Photon OS&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Mount the ISO image.&lt;/p>
&lt;p>For example, run the following command on macOS:&lt;/p>
&lt;p>&lt;code>hdiutil mount photon-3.0-ec12f2c.iso&lt;/code>&lt;/p>
&lt;p>Use a similar command in other operating systems.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Copy the contents of the ISO image to a writable directory so that you can edit files.
For example, run the following commands on macOS.&lt;/p>
&lt;pre>&lt;code>&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;p>mkdir -p /tmp/photonUsb&lt;/p>
&lt;pre>&lt;code>cp /Volumes/PHOTON_&amp;lt;timestamp&amp;gt;/* /tmp/photonUsb/
```
where, `/Volumes/PHOTON_&amp;lt;timestamp&amp;gt;` is the directory where the ISO is mounted with the command in the step above.
&lt;/code>&lt;/pre>
&lt;ol>
&lt;li>
&lt;p>Edit the &lt;code>grub.cfg&lt;/code> file to use the kickstart config file:&lt;/p>
&lt;p>&lt;code>cd /tmp/photonUsb&lt;/code>&lt;/p>
&lt;p>Add the below parameters to the linux cmd line in &lt;code>boot/grub2/grub.cfg&lt;/code>&lt;/p>
&lt;pre>&lt;code>linux /isolinux/vmlinuz root=/dev/ram0 loglevel=3 photon.media=UUID=$photondisk ks=cdrom:/isolinux/sample_ks.cfg console=ttyS0,115200n8
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Edit the &lt;code>isolinux/sample_ks.cfg&lt;/code> as follows:&lt;/p>
&lt;ul>
&lt;li>Change &lt;code>&amp;quot;disk&amp;quot;: &amp;quot;/dev/sda”,&lt;/code> to &lt;strong>&lt;code>&amp;quot;disk&amp;quot;: &amp;quot;/dev/mmcblk0&amp;quot;,&lt;/code>&lt;/strong>&lt;/li>
&lt;li>Change &lt;code>&amp;quot;echo \&amp;quot;Hello World\&amp;quot; &amp;gt; /etc/postinstall&amp;quot;&lt;/code> to &lt;strong>&lt;code>&amp;quot;sed -i 's/PermitRootLogin no/PermitRootLogin yes/g' /etc/ssh/sshd_config&amp;quot;&lt;/code>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Format the pen drive with FAT-32 and copy all the contents of &lt;code>/tmp/photonUsb&lt;/code> to the pen drive.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create a &lt;code>UsbInvocationScript.txt&lt;/code> file in the root of the pen drive with below content:&lt;/p>
&lt;pre>&lt;code>&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;p>usb_disable_secure_boot noreset;
usb_one_time_boot usb nolog;&lt;/p>
&lt;pre>&lt;code>
1. Insert the pen drive in the Dell Gateway 300X and power on the gateway.
Photon OS installs automatically.
1. After the installation is complete, insert a network cable into the ethernet port and find the IP address corresponding to the MAC address of the Dell Gateway 3000X ethernet port through the DHCP Server or a network analyzer. The MAC address is available on the Dell Gateway 3000X.
1. You can then use `ssh` to access the gateway with the above IP address.
&lt;/code>&lt;/pre></description></item><item><title>Docs-V3: Installing the Lightwave Server and Configuring It as a Domain Controller on a Photon Image</title><link>/docs-v3/installation-guide/installing-and-using-lightwave/installing-lightwave-server-and-setting-up-a-domain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/installation-guide/installing-and-using-lightwave/installing-lightwave-server-and-setting-up-a-domain/</guid><description>
&lt;p>You can configure Lightwave server as domain controller on a Photon client. You install the Lightwave server first. After the server is installed, you configure a new domain.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>Prepare a Photon OS client for the Lightwave server installation.&lt;/li>
&lt;li>Verify that the hostname of the client can be resolved.&lt;/li>
&lt;li>Verify that you have 500 MB free for the Lightwave server installation.&lt;/li>
&lt;/ul>
&lt;h2 id="procedure">Procedure&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Log in to your Photon OS client over SSH as an administrator.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install the Lightwave server by running the following command.&lt;/p>
&lt;p>&lt;code># tdnf install lightwave -y&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Configure the Lightwave server as domain controller by selecting a domain name and password for the &lt;code>administrator&lt;/code> user.&lt;/p>
&lt;p>The minimum required password complexity is 8 characters, one symbol, one upper case letter, and one lower case letter.
Optionally, if you want to access the domain controller over IP, configure the ip under the &lt;code>--ssl-subject-alt-name&lt;/code> parameter.
&lt;code># configure-lightwave-server --domain &amp;lt;your-domain&amp;gt; --password '&amp;lt;administrator-user-password&amp;gt;' --ssl-subject-alt-name &amp;lt;machine-ip-address&amp;gt;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Edit &lt;code>iptables&lt;/code> rules to allow connections to and from the client.&lt;/p>
&lt;p>The default Photon OS 3.0 firewall settings block all incoming, outgoing, and forwards so that you must reconfigure them.&lt;/p>
&lt;p>&lt;code># iptables -P INPUT ACCEPT&lt;/code>&lt;/p>
&lt;p>&lt;code># iptables -P OUTPUT ACCEPT&lt;/code>&lt;/p>
&lt;p>&lt;code># iptables -P FORWARD ACCEPT&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In a browser, go to https://&lt;em>lightwave-server-FQDN&lt;/em> to verify that you can log in to the newly created domain controller.&lt;/p>
&lt;ol>
&lt;li>On the Cascade Identity Services page, enter the domain that you configured and click &lt;strong>Take me to Lightwave Admin&lt;/strong>.&lt;/li>
&lt;li>On the Welcome page, enter administrator@your-domain as user name and the password that you set during the domain controller configuration and click &lt;strong>LOGIN&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol></description></item><item><title>Docs-V3: Installing the pmd Package</title><link>/docs-v3/installation-guide/photon-management-daemon/installing-pmd-package/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/installation-guide/photon-management-daemon/installing-pmd-package/</guid><description>
&lt;p>The pmd package is included with your Photon OS 3.0 distribution. To make sure that you have the latest version, you can run:&lt;/p>
&lt;pre>&lt;code># tdnf install pmd
# systemctl start pmd
&lt;/code>&lt;/pre></description></item><item><title>Docs: Installing the pmd Package</title><link>/docs/administration-guide/photon-management-daemon/installing-pmd-package/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/administration-guide/photon-management-daemon/installing-pmd-package/</guid><description>
&lt;p>The pmd package is included with your Photon OS 4.0 distribution. To make sure that you have the latest version, you can run:&lt;/p>
&lt;pre>&lt;code># tdnf install pmd
# systemctl start pmd
&lt;/code>&lt;/pre></description></item><item><title>Docs-V3: Introduction to 'tdnf'</title><link>/docs-v3/administration-guide/managing-packages-with-tdnf/intro-to-tndf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/administration-guide/managing-packages-with-tdnf/intro-to-tndf/</guid><description>
&lt;p>On Photon OS, tdnf is the default package manager for installing new packages. It is a C implementation of the DNF package manager without Python dependencies. DNF is the next upcoming major version of yum.&lt;/p>
&lt;p>Tdnf appears in the minimal and full versions of Photon OS. Tdnf reads yum repositories and works like yum. The full version of Photon OS also includes yum, and you can install packages by using yum if you want.&lt;/p>
&lt;p>In the minimal version of Photon OS, you can manage packages by using yum, but you must install it first by running the following &lt;code>tdnf&lt;/code> command as root:&lt;/p>
&lt;pre>&lt;code>tdnf install yum
&lt;/code>&lt;/pre>
&lt;p>Tdnf implements a subset of the &lt;code>dnf&lt;/code> commands as listed in the &lt;a href="http://dnf.readthedocs.org/en/latest/">dnf guide&lt;/a>.&lt;/p></description></item><item><title>Docs: Introduction to 'tdnf'</title><link>/docs/administration-guide/managing-packages-with-tdnf/intro-to-tdnf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/administration-guide/managing-packages-with-tdnf/intro-to-tdnf/</guid><description>
&lt;p>On Photon OS, &lt;code>tdnf&lt;/code> is the default package manager for installing new packages. It is a C implementation of the DNF package manager without Python dependencies.&lt;/p>
&lt;p>Tdnf appears in the minimal and full versions of Photon OS.&lt;/p>
&lt;p>Tdnf implements a subset of the &lt;code>dnf&lt;/code> commands as listed in the &lt;a href="http://dnf.readthedocs.org/en/latest/">dnf guide&lt;/a>.&lt;/p></description></item><item><title>Docs-V3: Introduction to Photon OS</title><link>/docs-v3/overview/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/overview/introduction/</guid><description>
&lt;p>Photon OS, is an open-source minimalist Linux operating system from VMware that is optimized for cloud computing platforms, VMware vSphere deployments, and applications native to the cloud.&lt;/p>
&lt;p>Photon OS is a Linux container host optimized for vSphere and cloud-computing platforms such as Amazon Elastic Compute and Google Compute Engine. As a lightweight and extensible operating system, Photon OS works with the most common container formats, including Docker, Rocket, and Garden. Photon OS includes a yum-compatible, package-based lifecycle management system called tdnf.&lt;/p>
&lt;p>When used with development tools and environments such as VMware Fusion, VMware Workstation, and production runtime environments (vSphere, vCloud Air), Photon OS lets you seamlessly migrate container-based applications from development to production. With a small footprint and fast boot and run times, Photon OS is optimized for cloud computing and cloud applications.&lt;/p></description></item><item><title>Docs: Introduction to Photon OS</title><link>/docs/overview/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/introduction/</guid><description>
&lt;p>Photon OS, is an open-source minimalist Linux operating system from VMware that is optimized for cloud computing platforms, VMware vSphere deployments, and applications native to the cloud.&lt;/p>
&lt;p>Photon OS is a Linux container host optimized for vSphere and cloud-computing platforms such as Amazon Elastic Compute and Google Compute Engine. As a lightweight and extensible operating system, Photon OS works with the most common container formats, including Docker, Rocket, and Garden. Photon OS includes a yum-compatible, package-based lifecycle management system called tdnf.&lt;/p>
&lt;p>When used with development tools and environments such as VMware Fusion, VMware Workstation, and production runtime environments (vSphere), Photon OS lets you seamlessly migrate container-based applications from development to production. With a small footprint and fast boot and run times, Photon OS is optimized for cloud computing and cloud applications.&lt;/p></description></item><item><title>Docs-V3: Kernel Overview</title><link>/docs-v3/troubleshooting-guide/kernel-problems-and-boot-and-login-errors/kernel-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/troubleshooting-guide/kernel-problems-and-boot-and-login-errors/kernel-overview/</guid><description>
&lt;p>You can use &lt;code>dmesg&lt;/code> command to troubleshooting kernel errors. The &lt;code>dmesg&lt;/code> command prints messages from the kernel ring buffer.&lt;/p>
&lt;p>The following command, for example, presents kernel messages in a human-readable format:&lt;/p>
&lt;pre>&lt;code>dmesg --human --kernel
&lt;/code>&lt;/pre>
&lt;p>To examine kernel messages as you perform actions, such as reproducing a problem, in another terminal, you can run the command with the &lt;code>--follow&lt;/code> option, which waits for new messages and prints them as they occur:&lt;/p>
&lt;pre>&lt;code>dmesg --human --kernel --follow
&lt;/code>&lt;/pre>
&lt;p>The kernel buffer is limited in memory size. As a result, the kernel cyclically overwrites the end of the information in the buffer from which &lt;code>dmesg&lt;/code> pulls information. The systemd journal, however, saves the information from the buffer to a log file so that you can access older information.&lt;/p>
&lt;p>To view it, run the following command:&lt;/p>
&lt;pre>&lt;code>journalctl -k
&lt;/code>&lt;/pre>
&lt;p>If required, you can check the modules that are loaded on your Photon OS machine by running the &lt;code>lsmod&lt;/code> command. For example:&lt;/p>
&lt;pre>&lt;code>lsmod
Module Size Used by
vmw_vsock_vmci_transport 28672 1
vsock 36864 2 vmw_vsock_vmci_transport
coretemp 16384 0
hwmon 16384 1 coretemp
crc32c_intel 24576 0
hid_generic 16384 0
usbhid 28672 0
hid 106496 2 hid_generic,usbhid
xt_conntrack 16384 1
iptable_nat 16384 0
nf_conntrack_ipv4 16384 2
nf_defrag_ipv4 16384 1 nf_conntrack_ipv4
nf_nat_ipv4 16384 1 iptable_nat
nf_nat 24576 1 nf_nat_ipv4
iptable_filter 16384 1
ip_tables 24576 2 iptable_filter,iptable_nat
&lt;/code>&lt;/pre></description></item><item><title>Docs: Kernel Overview</title><link>/docs/troubleshooting-guide/kernel-problems-and-boot-and-login-errors/kernel-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/troubleshooting-guide/kernel-problems-and-boot-and-login-errors/kernel-overview/</guid><description>
&lt;p>You can use &lt;code>dmesg&lt;/code> command to troubleshooting kernel errors. The &lt;code>dmesg&lt;/code> command prints messages from the kernel ring buffer.&lt;/p>
&lt;p>The following command, for example, presents kernel messages in a human-readable format:&lt;/p>
&lt;pre>&lt;code>dmesg --human --kernel
&lt;/code>&lt;/pre>
&lt;p>To examine kernel messages as you perform actions, such as reproducing a problem, in another terminal, you can run the command with the &lt;code>--follow&lt;/code> option, which waits for new messages and prints them as they occur:&lt;/p>
&lt;pre>&lt;code>dmesg --human --kernel --follow
&lt;/code>&lt;/pre>
&lt;p>The kernel buffer is limited in memory size. As a result, the kernel cyclically overwrites the end of the information in the buffer from which &lt;code>dmesg&lt;/code> pulls information. The systemd journal, however, saves the information from the buffer to a log file so that you can access older information.&lt;/p>
&lt;p>To view it, run the following command:&lt;/p>
&lt;pre>&lt;code>journalctl -k
&lt;/code>&lt;/pre>
&lt;p>If required, you can check the modules that are loaded on your Photon OS machine by running the &lt;code>lsmod&lt;/code> command. For example:&lt;/p>
&lt;pre>&lt;code>lsmod
Module Size Used by
vmw_vsock_vmci_transport 28672 1
vsock 36864 2 vmw_vsock_vmci_transport
coretemp 16384 0
hwmon 16384 1 coretemp
crc32c_intel 24576 0
hid_generic 16384 0
usbhid 28672 0
hid 106496 2 hid_generic,usbhid
xt_conntrack 16384 1
iptable_nat 16384 0
nf_conntrack_ipv4 16384 2
nf_defrag_ipv4 16384 1 nf_conntrack_ipv4
nf_nat_ipv4 16384 1 iptable_nat
nf_nat 24576 1 nf_nat_ipv4
iptable_filter 16384 1
ip_tables 24576 2 iptable_filter,iptable_nat
&lt;/code>&lt;/pre></description></item><item><title>Docs-V3: Managing the Network Configuration</title><link>/docs-v3/troubleshooting-guide/network-troubleshooting/managing-the-network-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/troubleshooting-guide/network-troubleshooting/managing-the-network-configuration/</guid><description>
&lt;p>The network service, which is enabled by default, starts when the system boots. You manage the network service by using systemd commands, such as &lt;code>systemd-networkd&lt;/code>, &lt;code>systemd-resolvd&lt;/code>, and &lt;code>networkctl&lt;/code>.&lt;/p>
&lt;p>You can check the status of the network service by running the following command:&lt;/p>
&lt;pre>&lt;code>systemctl status systemd-networkd
&lt;/code>&lt;/pre>
&lt;p>The following is a result of the command:&lt;/p>
&lt;pre>&lt;code>* systemd-networkd.service - Network Service
Loaded: loaded (/usr/lib/systemd/system/systemd-networkd.service; enabled; vendor preset: enabled)
Active: active (running) since Fri 2016-04-29 15:08:51 UTC; 6 days ago
Docs: man:systemd-networkd.service(8)
Main PID: 291 (systemd-network)
Status: &amp;quot;Processing requests...&amp;quot;
CGroup: /system.slice/systemd-networkd.service
`-291 /lib/systemd/systemd-networkd
&lt;/code>&lt;/pre></description></item><item><title>Docs: Managing the Network Configuration</title><link>/docs/troubleshooting-guide/network-troubleshooting/managing-the-network-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/troubleshooting-guide/network-troubleshooting/managing-the-network-configuration/</guid><description>
&lt;p>The network service, which is enabled by default, starts when the system boots. You manage the network service by using systemd commands, such as &lt;code>systemd-networkd&lt;/code>, &lt;code>systemd-resolvd&lt;/code>, and &lt;code>networkctl&lt;/code>.&lt;/p>
&lt;p>You can check the status of the network service by running the following command:&lt;/p>
&lt;pre>&lt;code>systemctl status systemd-networkd
&lt;/code>&lt;/pre>
&lt;p>The following is a result of the command:&lt;/p>
&lt;pre>&lt;code>* systemd-networkd.service - Network Service
Loaded: loaded (/usr/lib/systemd/system/systemd-networkd.service; enabled; vendor preset: enabled)
Active: active (running) since Fri 2016-04-29 15:08:51 UTC; 6 days ago
Docs: man:systemd-networkd.service(8)
Main PID: 291 (systemd-network)
Status: &amp;quot;Processing requests...&amp;quot;
CGroup: /system.slice/systemd-networkd.service
`-291 /lib/systemd/systemd-networkd
&lt;/code>&lt;/pre></description></item><item><title>Docs-V3: Photon Code</title><link>/docs-v3/troubleshooting-guide/photon-os-general-troubleshooting/photon-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/troubleshooting-guide/photon-os-general-troubleshooting/photon-code/</guid><description>
&lt;p>Photon is an RPM based Linux distribution similar to variants like CentOS and Fedora. With RPM based distributions granular updates as opposed to updating the whole OS image is possible.&lt;/p>
&lt;p>##SPEC File
The &amp;ldquo;Recipe&amp;rdquo; for creating an RPM package is a spec file. The Photon code base&amp;rsquo;s &lt;strong>SPECS&lt;/strong> folder hast the following directory structure:&lt;/p>
&lt;pre>&lt;code>SourceRoot
SPECS
linux
patch1
patch2
linux.spec
&lt;/code>&lt;/pre>&lt;p>##To Check if a Package is Signed
Run the following commands to check if the package is signed:&lt;/p>
&lt;pre>&lt;code>#check if a package is signed
rpm -q linux --qf '%{NAME}-%{VERSION}-%{RELEASE} %{SIGPGP:pgpsig} %{SIGGPG:pgpsig}\n'
linux-4.19.79-2.ph3 RSA/SHA1, Thu 31 Oct 2019 10:05:05 AM UTC, Key ID c0b5e0ab66fd4949 (none)
#or
rpm -qi linux | grep &amp;quot;Signature&amp;quot;
Signature : RSA/SHA1, Thu 31 Oct 2019 10:05:05 AM UTC, Key ID c0b5e0ab66fd4949
#Last 8 chars of Key ID: 66fd4949
#See if it matches the version of any of the gpg keys installed.
rpm -qa | grep gpg-pubkey | xargs -n1 rpm -q --queryformat &amp;quot;%{NAME} %{VERSION} %{PACKAGER}\n&amp;quot;
gpg-pubkey 66fd4949 VMware, Inc. -- Linux Packaging Key -- linux-packages@vmware.com
gpg-pubkey 3e1ba8d5 Google Cloud Packages RPM Signing Key gc-team@google.com
&lt;/code>&lt;/pre>&lt;p>##To Check if Your Image Has Vulnerabilities
Use the security scanners to find security issues. Alternatively The &lt;code>tdnf updateinfo info&lt;/code> command displays all the applicable security updates the host needs.&lt;/p>
&lt;p>##To Check if a CVE is Fixed
The Photon team fix the vulnerabilities and then publish the advisories to (&lt;a href="https://github.com/vmware/photon/wiki/Security-Advisories)">https://github.com/vmware/photon/wiki/Security-Advisories)&lt;/a>.&lt;/p>
&lt;p>##To Check if Security Updates are Available
Use the &lt;code>tdnf updateinfo info&lt;/code>, &lt;code>tdnf update --security&lt;/code> or &lt;code>tdnf update ---sec-severity &amp;lt;level&amp;gt;&lt;/code> commands to check if security updates are available. For example:&lt;/p>
&lt;pre>&lt;code>#check if there are any security updates
root@photon-9a8c05dd97e9 [ ~ ]# tdnf updateinfo
70 Security notice(s)
#check if there are security updates for libssh2. note this is relative to what is installed in local
root@photon-9a8c05dd97e9 [ ~ ]# tdnf updateinfo list libssh2
patch:PHSA-2020-3.0-0047 Security libssh2-1.9.0-2.ph3.x86_64.rpm
patch:PHSA-2019-3.0-0025 Security libssh2-1.9.0-1.ph3.x86_64.rpm
patch:PHSA-2019-3.0-0009 Security libssh2-1.8.2-1.ph3.x86_64.rpm
patch:PHSA-2019-3.0-0008 Security libssh2-1.8.0-2.ph3.x86_64.rpm
#show details of all the libssh2 updates
root@photon-9a8c05dd97e9 [ ~ ]# tdnf updateinfo info libssh2
Name : libssh2-1.9.0-2.ph3.x86_64.rpm
Update ID : patch:PHSA-2020-3.0-0047
Type : Security
Updated : Wed Jan 15 10:48:25 2020
Needs Reboot: 0
Description : Security fixes for {'CVE-2019-17498'}
Name : libssh2-1.9.0-1.ph3.x86_64.rpm
Update ID : patch:PHSA-2019-3.0-0025
Type : Security
Updated : Sat Aug 17 16:14:35 2019
Needs Reboot: 0
Description : Security fixes for {'CVE-2019-13115'}
Name : libssh2-1.8.2-1.ph3.x86_64.rpm
Update ID : patch:PHSA-2019-3.0-0009
Type : Security
Updated : Sat Apr 13 03:34:22 2019
Needs Reboot: 0
Description : Security fixes for {'CVE-2019-3859', 'CVE-2019-3862', 'CVE-2019-3861', 'CVE-2019-3857', 'CVE-2019-3858', 'CVE-2019-3863', 'CVE-2019-3860', 'CVE-2019-3856'}
Name : libssh2-1.8.0-2.ph3.x86_64.rpm
Update ID : patch:PHSA-2019-3.0-0008
Type : Security
Updated : Fri Mar 29 16:04:18 2019
Needs Reboot: 0
Description : Security fixes for {'CVE-2019-3855'}
#install all security updates &amp;gt;= score 9.0 (CVSS_v3.0_Severity)
root@photon-9a8c05dd97e9 [ ~ ]# tdnf update --sec-severity 9.0
Upgrading:
apache-tomcat noarch 8.5.50-1.ph3 photon-updates 9.00M 9440211
bash x86_64 4.4.18-2.ph3 photon-updates 3.16M 3315720
bzip2 x86_64 1.0.8-1.ph3 photon-updates 124.99k 127990
bzip2-libs x86_64 1.0.8-1.ph3 photon-updates 74.31k 76096
file x86_64 5.34-2.ph3 photon-updates 43.02k 44056
file-libs x86_64 5.34-2.ph3 photon-updates 5.21M 5458536
git x86_64 2.23.1-2.ph3 photon-updates 24.34M 25519969
glib x86_64 2.58.0-4.ph3 photon-updates 3.11M 3265152
libseccomp x86_64 2.4.0-2.ph3 photon-updates 315.79k 323368
libssh2 x86_64 1.9.0-2.ph3 photon-updates 238.41k 244136
linux-esx x86_64 4.19.97-2.ph3 photon-updates 12.68M 13299655
Total installed size: 58.28M 61114889
&lt;/code>&lt;/pre></description></item><item><title>Docs: Photon Code</title><link>/docs/troubleshooting-guide/photon-os-general-troubleshooting/photon-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/troubleshooting-guide/photon-os-general-troubleshooting/photon-code/</guid><description>
&lt;p>Photon is an RPM based Linux distribution similar to variants like CentOS and Fedora. With RPM based distributions granular updates as opposed to updating the whole OS image is possible.&lt;/p>
&lt;p>##SPEC File
The &amp;ldquo;Recipe&amp;rdquo; for creating an RPM package is a spec file. The Photon code base&amp;rsquo;s &lt;strong>SPECS&lt;/strong> folder hast the following directory structure:&lt;/p>
&lt;pre>&lt;code>SourceRoot
SPECS
linux
patch1
patch2
linux.spec
&lt;/code>&lt;/pre>&lt;h2 id="check-if-a-package-is-signed">Check if a package is signed&lt;/h2>
&lt;p>Run the following commands to check if the package is signed:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic">#check if a package is signed&lt;/span>
rpm -q linux --qf &lt;span style="color:#4e9a06">&amp;#39;%{NAME}-%{VERSION}-%{RELEASE} %{SIGPGP:pgpsig} %{SIGGPG:pgpsig}\n&amp;#39;&lt;/span>
linux-4.19.79-2.ph3 RSA/SHA1, Thu &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">2019&lt;/span> 10:05:05 AM UTC, Key ID c0b5e0ab66fd4949 &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>none&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#or&lt;/span>
rpm -qi linux &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep &lt;span style="color:#4e9a06">&amp;#34;Signature&amp;#34;&lt;/span>
Signature : RSA/SHA1, Thu &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">2019&lt;/span> 10:05:05 AM UTC, Key ID c0b5e0ab66fd4949
&lt;span style="color:#8f5902;font-style:italic">#Last 8 chars of Key ID: 66fd4949&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#See if it matches the version of any of the gpg keys installed.&lt;/span>
rpm -qa &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep gpg-pubkey &lt;span style="color:#000;font-weight:bold">|&lt;/span> xargs -n1 rpm -q --queryformat &lt;span style="color:#4e9a06">&amp;#34;%{NAME} %{VERSION} %{PACKAGER}\n&amp;#34;&lt;/span>
gpg-pubkey 66fd4949 VMware, Inc. -- Linux Packaging Key -- linux-packages@vmware.com
gpg-pubkey 3e1ba8d5 Google Cloud Packages RPM Signing Key gc-team@google.com
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="check-if-an-image-has-vulnerabilities">Check if an image has vulnerabilities&lt;/h2>
&lt;p>Use the security scanners to find security issues. Alternatively The &lt;code>tdnf updateinfo info&lt;/code> command displays all the applicable security updates the host needs.&lt;/p>
&lt;h2 id="check-if-a-cve-is-fixed">Check if a CVE is Fixed&lt;/h2>
&lt;p>The Photon team fixes vulnerabilities and publishes advisories to &lt;a href="https://github.com/vmware/photon/wiki/Security-Advisories">https://github.com/vmware/photon/wiki/Security-Advisories&lt;/a>.&lt;/p>
&lt;h2 id="to-check-if-security-updates-are-available">To Check if Security Updates are Available&lt;/h2>
&lt;p>Use the &lt;code>tdnf updateinfo info&lt;/code>, &lt;code>tdnf update --security&lt;/code> or &lt;code>tdnf update ---sec-severity &amp;lt;level&amp;gt;&lt;/code> commands to check if security updates are available. For example:&lt;/p>
&lt;p>Check if there are any security updates&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">root@photon [ ~ ]# tdnf updateinfo
70 Security notice(s)
&lt;/code>&lt;/pre>&lt;p>Check if there are security updates for libssh2. note this is relative to what is installed in local&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">root@photon[ ~ ]# tdnf updateinfo list libssh2
patch:PHSA-2020-3.0-0047 Security libssh2-1.9.0-2.ph3.x86_64.rpm
patch:PHSA-2019-3.0-0025 Security libssh2-1.9.0-1.ph3.x86_64.rpm
patch:PHSA-2019-3.0-0009 Security libssh2-1.8.2-1.ph3.x86_64.rpm
patch:PHSA-2019-3.0-0008 Security libssh2-1.8.0-2.ph3.x86_64.rpm
&lt;/code>&lt;/pre>&lt;p>Show details of all the libssh2 updates
root@photon [ ~ ]# tdnf updateinfo info libssh2
Name : libssh2-1.9.0-2.ph3.x86_64.rpm
Update ID : patch:PHSA-2020-3.0-0047
Type : Security
Updated : Wed Jan 15 10:48:25 2020
Needs Reboot: 0
Description : Security fixes for {&amp;lsquo;CVE-2019-17498&amp;rsquo;}
Name : libssh2-1.9.0-1.ph3.x86_64.rpm
Update ID : patch:PHSA-2019-3.0-0025
Type : Security
Updated : Sat Aug 17 16:14:35 2019
Needs Reboot: 0
Description : Security fixes for {&amp;lsquo;CVE-2019-13115&amp;rsquo;}
Name : libssh2-1.8.2-1.ph3.x86_64.rpm
Update ID : patch:PHSA-2019-3.0-0009
Type : Security
Updated : Sat Apr 13 03:34:22 2019
Needs Reboot: 0
Description : Security fixes for {&amp;lsquo;CVE-2019-3859&amp;rsquo;, &amp;lsquo;CVE-2019-3862&amp;rsquo;, &amp;lsquo;CVE-2019-3861&amp;rsquo;, &amp;lsquo;CVE-2019-3857&amp;rsquo;, &amp;lsquo;CVE-2019-3858&amp;rsquo;, &amp;lsquo;CVE-2019-3863&amp;rsquo;, &amp;lsquo;CVE-2019-3860&amp;rsquo;, &amp;lsquo;CVE-2019-3856&amp;rsquo;}
Name : libssh2-1.8.0-2.ph3.x86_64.rpm
Update ID : patch:PHSA-2019-3.0-0008
Type : Security
Updated : Fri Mar 29 16:04:18 2019
Needs Reboot: 0
Description : Security fixes for {&amp;lsquo;CVE-2019-3855&amp;rsquo;}&lt;/p>
&lt;pre>&lt;code>
install all security updates &amp;gt;= score 9.0 (CVSS_v3.0_Severity)
```console
root@photon [ ~ ]# tdnf update --sec-severity 9.0
Upgrading:
apache-tomcat noarch 8.5.50-1.ph3 photon-updates 9.00M 9440211
bash x86_64 4.4.18-2.ph3 photon-updates 3.16M 3315720
bzip2 x86_64 1.0.8-1.ph3 photon-updates 124.99k 127990
bzip2-libs x86_64 1.0.8-1.ph3 photon-updates 74.31k 76096
file x86_64 5.34-2.ph3 photon-updates 43.02k 44056
file-libs x86_64 5.34-2.ph3 photon-updates 5.21M 5458536
git x86_64 2.23.1-2.ph3 photon-updates 24.34M 25519969
glib x86_64 2.58.0-4.ph3 photon-updates 3.11M 3265152
libseccomp x86_64 2.4.0-2.ph3 photon-updates 315.79k 323368
libssh2 x86_64 1.9.0-2.ph3 photon-updates 238.41k 244136
linux-esx x86_64 4.19.97-2.ph3 photon-updates 12.68M 13299655
Total installed size: 58.28M 61114889
&lt;/code>&lt;/pre></description></item><item><title>Docs-V3: Prerequisites</title><link>/docs-v3/user-guide/kickstart-through-http/kickstart-prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/user-guide/kickstart-through-http/kickstart-prerequisites/</guid><description>
&lt;p>Before you kick start a build, verify that you have the following resources:&lt;/p>
&lt;ul>
&lt;li>Packer 0.8 or later version.&lt;/li>
&lt;li>VMware Fusion or Workstation&lt;/li>
&lt;li>VirtualBox (optional)&lt;/li>
&lt;li>Photon Packer template. The template contains the following artifacts:
&lt;ul>
&lt;li>&lt;code>packer-photon.json&lt;/code> file&lt;/li>
&lt;li>&lt;code>scripts&lt;/code> folder. The folder that contains the scripts you require to kickstart Photon OS.&lt;/li>
&lt;li>&lt;code>vars&lt;/code> folder. The folder that contains the Photon OS 3.0 ISO URL.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>packages_minimal.json&lt;/code> file. The JSON file that contains the install profile you require.&lt;/li>
&lt;/ul></description></item><item><title>Docs-V3: Prerequisites</title><link>/docs-v3/user-guide/kubernetes-on-photon-os/kubernetes-prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/user-guide/kubernetes-on-photon-os/kubernetes-prerequisites/</guid><description>
&lt;p>You need two or more machines with the 3.0 general availability or later version of Photon OS installed.&lt;/p></description></item><item><title>Docs: Prerequisites</title><link>/docs/user-guide/kickstart-through-http/kickstart-prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/user-guide/kickstart-through-http/kickstart-prerequisites/</guid><description>
&lt;p>Before you kick start a build, verify that you have the following resources:&lt;/p>
&lt;ul>
&lt;li>Packer 0.8 or later version.&lt;/li>
&lt;li>VMware Fusion or Workstation&lt;/li>
&lt;li>VirtualBox (optional)&lt;/li>
&lt;li>Photon Packer template. The template contains the following artifacts:
&lt;ul>
&lt;li>&lt;code>packer-photon.json&lt;/code> file&lt;/li>
&lt;li>&lt;code>scripts&lt;/code> folder. The folder that contains the scripts you require to kickstart Photon OS.&lt;/li>
&lt;li>&lt;code>vars&lt;/code> folder. The folder that contains the Photon OS 3.0 ISO URL.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>packages_minimal.json&lt;/code> file. The JSON file that contains the install profile you require.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Prerequisites</title><link>/docs/user-guide/kubernetes-on-photon-os/kubernetes-prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/user-guide/kubernetes-on-photon-os/kubernetes-prerequisites/</guid><description>
&lt;p>You need two or more machines with version 3.0 &amp;ldquo;GA&amp;rdquo; or later of Photon OS installed. It is recommended to use the latest 4.0 GA version.&lt;/p></description></item><item><title>Docs: Prerequisites for Running Photon OS on Workstation</title><link>/docs/installation-guide/run-photon-on-workstation/prerequisites-for-photon-os-on-workstation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/installation-guide/run-photon-on-workstation/prerequisites-for-photon-os-on-workstation/</guid><description>
&lt;p>Before you use Photon OS within Workstation, perform the following prerequisite tasks:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Verify that you have the following resources:&lt;/p>
&lt;table style="height: 170px;" border="1" width="auto" cellspacing="0" cellpadding="10">
&lt;tbody>
&lt;tr>
&lt;td>&lt;b>Resource&lt;/b>&lt;/td>
&lt;td>&lt;b>Description&lt;/b>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> VMware Workstation&lt;/td>
&lt;td>VMware Workstation must be installed (Workstation 10 or higher). The latest version is recommended.&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Memory&lt;/td>
&lt;td> 2GB of free RAM (recommended) &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Storage&lt;/td>
&lt;td>&lt;b>Minimal Photon install&lt;/b>: 512MB of free space (minimum); &lt;b>Full Photon install&lt;/b>: 4GB of free space (minimum); 8GB is recommended.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Distribution File&lt;/td>
&lt;td>Photon OS ISO or OVA file downloaded from VMware (&lt;a href="https://packages.vmware.com/photon/4.0/GA/">https://packages.vmware.com/photon/4.0/GA/&lt;/a>).&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/br>
&lt;p>Resource requirements and recommendations vary depending on several factors, including the host environment (for example, VMware Workstation and VMware vSphere), the distribution file used (ISO or OVA), and the selected installation settings (for example, full or basic installation).&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> The setup instructions in this guide use VMware Workstation Professional version 12.5.7.&lt;/p>
&lt;p>&lt;img src="../docs/installation-guide/images/ws_version.png" alt="Workstation version">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Decide whether to use the OVA or ISO distribution to set up Photon OS.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>OVA import&lt;/strong> : Because of the nature of an OVA, you&amp;rsquo;re getting a pre-installed version of Photon OS. You can choose the hardware version you want (OVA with hardware version 13 or 11). The OVA benefits from a simple import process and some kernel tuning for VMware environments. However, because it&amp;rsquo;s a pre-installed version, the set of packages that are installed are predetermined. Any additional packages that you need can be installed using tdnf.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>ISO install&lt;/strong> : The ISO, on the other hand, allows for a more complete installation or automated installation via kickstart.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>To get Photon OS up and running quickly, use the OVA.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Download Photon OS. Go to the following URL and download the latest release of Photon OS:&lt;/p>
&lt;p>&lt;a href="https://packages.vmware.com/photon/4.0/GA/">https://packages.vmware.com/photon/4.0/GA/&lt;/a>&lt;/p>
&lt;p>For instructions, see &lt;a href="../docs/installation-guide/downloading-photon/">Downloading Photon OS&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Docs-V3: Prerequisites for Running Photon OS on AWS EC2</title><link>/docs-v3/installation-guide/run-photon-aws-ec2/prerequisites-for-photon-os-on-aws-ec2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/installation-guide/run-photon-aws-ec2/prerequisites-for-photon-os-on-aws-ec2/</guid><description>
&lt;p>Before you use Photon OS with Amazon Elastic Cloud Compute(AWS EC2), perform the following prerequisite tasks:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Verify that you have the following resources:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>AWS account&lt;/strong>. Working with EC2 requires an Amazon account for AWS with valid payment information. Keep in mind that, if you try the examples in this document, you will be charged by Amazon. See &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html">Setting Up with Amazon EC2&lt;/a>.&lt;/li>
&lt;li>&lt;strong>Amazon tools&lt;/strong>. The following examples also assume that you have installed and configured the Amazon AWS CLI and the EC2 CLI and AMI tools, including ec2-ami-tools.&lt;/li>
&lt;/ul>
&lt;p>For more information, see &lt;a href="http://docs.aws.amazon.com/cli/latest/userguide/installing.html">Installing the AWS Command Line Interface&lt;/a>, &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/set-up-ec2-cli-linux.html">Setting Up the Amazon EC2 Command Line Interface Tools on Linux&lt;/a>, and &lt;a href="http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html">Configuring AWS Command-Line Interface&lt;/a>. Also see &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/set-up-ami-tools.html">Setting Up the AMI Tools&lt;/a>.&lt;/p>
&lt;p>The procedure in this section uses an Ubuntu 14.04 workstation to generate the keys and certificates that AWS requires.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Download the Photon OS image for Amazon.&lt;/p>
&lt;p>VMware packages Photon OS as a cloud-ready Amazon machine image (AMI) that you can download for free. For more information, see &lt;a href="../../downloading-photon/">Downloading Photon OS&lt;/a>.&lt;/p>
&lt;p>Download the Photon OS AMI and save it on your workstation.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>: The AMI version of Photon is a virtual appliance with the information and packages that Amazon needs to launch an instance of Photon in the cloud. To build the AMI version, VMware starts with the minimal version of Photon OS and adds the sudo and tar packages to it.&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Docs: Prerequisites for Running Photon OS on AWS EC2</title><link>/docs/installation-guide/run-photon-aws-ec2/prerequisites-for-photon-os-on-aws-ec2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/installation-guide/run-photon-aws-ec2/prerequisites-for-photon-os-on-aws-ec2/</guid><description>
&lt;p>Before you use Photon OS with Amazon Elastic Cloud Compute(AWS EC2), perform the following prerequisite tasks:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Verify that you have the following resources:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>AWS account&lt;/strong>. Working with EC2 requires an Amazon account for AWS with valid payment information. Keep in mind that, if you try the examples in this document, you will be charged by Amazon. See &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html">Setting Up with Amazon EC2&lt;/a>.&lt;/li>
&lt;li>&lt;strong>Amazon tools&lt;/strong>. The following examples also assume that you have installed and configured the Amazon AWS CLI and the EC2 CLI and AMI tools, including ec2-ami-tools.&lt;/li>
&lt;/ul>
&lt;p>For more information, see &lt;a href="http://docs.aws.amazon.com/cli/latest/userguide/installing.html">Installing the AWS Command Line Interface&lt;/a>, &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/set-up-ec2-cli-linux.html">Setting Up the Amazon EC2 Command Line Interface Tools on Linux&lt;/a>, and &lt;a href="http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html">Configuring AWS Command-Line Interface&lt;/a>. Also see &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/set-up-ami-tools.html">Setting Up the AMI Tools&lt;/a>.&lt;/p>
&lt;p>The procedure in this section uses an Ubuntu 14.04 workstation to generate the keys and certificates that AWS requires.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Download the Photon OS image for Amazon.&lt;/p>
&lt;p>VMware packages Photon OS as a cloud-ready Amazon machine image (AMI) that you can download for free from &lt;a href="https://packages.vmware.com/photon/">https://packages.vmware.com/photon/&lt;/a>.&lt;/p>
&lt;p>Download the Photon OS AMI and save it on your workstation. For more infromation, see &lt;a href="../../downloading-photon/">Downloading Photon OS&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>: The AMI version of Photon is a virtual appliance with the information and packages that Amazon needs to launch an instance of Photon in the cloud. To build the AMI version, VMware starts with the minimal version of Photon OS and adds the sudo and tar packages to it.&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Docs-V3: Prerequisites for Running Photon OS on Azure</title><link>/docs-v3/installation-guide/run-photon-on-azure/prerequisites-for-photon-os-on-azure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs-v3/installation-guide/run-photon-on-azure/prerequisites-for-photon-os-on-azure/</guid><description>
&lt;p>Before you use Photon OS with Microsoft Azure, perform the following prerequisite tasks:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Verify that you have a Microsoft Azure account. To create an account, see &lt;a href="https://azure.microsoft.com">https://azure.microsoft.com&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install the latest version of Azure CLI. See &lt;a href="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest">Install Azure CLI 2.0&lt;/a> and &lt;a href="https://docs.microsoft.com/en-us/cli/azure/get-started-with-azure-cli?view=azure-cli-latest">Get started with Azure CLI 2.0&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Verify that that you have a pair of SSH public and private keys.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Download and extract the Photon OS VHD file.&lt;/p>
&lt;p>VMware packages Photon OS as a cloud-ready virtual hard disk (VHD file) that you can download for free from &lt;a href="https://packages.vmware.com/photon">Packages URL&lt;/a>. This VHD file is a virtual appliance with the information and packages that Azure needs to launch an instance of Photon in the cloud. After you have downloaded the distribution archive, extract the VHD file from it. You will later need to upload this VHD file to Azure, where it will be stored in an Azure storage account. For more information, see &lt;a href="../../downloading-photon/">Downloading Photon OS&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Docs: Prerequisites for Running Photon OS on Azure</title><link>/docs/installation-guide/run-photon-on-azure/prerequisites-for-photon-os-on-azure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/installation-guide/run-photon-on-azure/prerequisites-for-photon-os-on-azure/</guid><description>
&lt;p>Before you use Photon OS with Microsoft Azure, perform the following prerequisite tasks:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Verify that you have a Microsoft Azure account. To create an account, see &lt;a href="https://azure.microsoft.com">https://azure.microsoft.com&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install the latest version of Azure CLI. See &lt;a href="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest">Install Azure CLI&lt;/a> and &lt;a href="https://docs.microsoft.com/en-us/cli/azure/get-started-with-azure-cli?view=azure-cli-latest">Get started with Azure CLI &lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Verify that that you have a pair of SSH public and private keys.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Download and extract the Photon OS VHD file.&lt;/p>
&lt;p>VMware packages Photon OS as an Azure-ready virtual hard disk (VHD file) that you can download for free from the &lt;a href="https://packages.vmware.com/photon/4.0/GA/azure/">VMware Photon Packages&lt;/a> site. This VHD file is a virtual appliance with the information and packages that Azure needs to launch an instance of Photon in the cloud. After you have downloaded the distribution archive, extract the VHD file from it. You will later need to upload this VHD file to Azure, where it will be stored in an Azure storage account. For more information, see &lt;a href="../../downloading-photon/">Downloading Photon OS&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ol></description></item></channel></rss>
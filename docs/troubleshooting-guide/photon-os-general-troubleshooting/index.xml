<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>â€“ Photon OS General Troubleshooting</title><link>/docs/troubleshooting-guide/photon-os-general-troubleshooting/</link><description>Recent content in Photon OS General Troubleshooting on</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/troubleshooting-guide/photon-os-general-troubleshooting/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Photon Code</title><link>/docs/troubleshooting-guide/photon-os-general-troubleshooting/photon-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/troubleshooting-guide/photon-os-general-troubleshooting/photon-code/</guid><description>
&lt;p>Photon is an RPM based Linux distribution similar to variants like CentOS and Fedora. With RPM based distributions granular updates as opposed to updating the whole OS image is possible.&lt;/p>
&lt;p>##SPEC File
The &amp;ldquo;Recipe&amp;rdquo; for creating an RPM package is a spec file. The Photon code base&amp;rsquo;s &lt;strong>SPECS&lt;/strong> folder hast the following directory structure:&lt;/p>
&lt;pre>&lt;code>SourceRoot
SPECS
linux
patch1
patch2
linux.spec
&lt;/code>&lt;/pre>&lt;h2 id="check-if-a-package-is-signed">Check if a package is signed&lt;/h2>
&lt;p>Run the following commands to check if the package is signed:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic">#check if a package is signed&lt;/span>
rpm -q linux --qf &lt;span style="color:#4e9a06">&amp;#39;%{NAME}-%{VERSION}-%{RELEASE} %{SIGPGP:pgpsig} %{SIGGPG:pgpsig}\n&amp;#39;&lt;/span>
linux-4.19.79-2.ph3 RSA/SHA1, Thu &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">2019&lt;/span> 10:05:05 AM UTC, Key ID c0b5e0ab66fd4949 &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>none&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#or&lt;/span>
rpm -qi linux &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep &lt;span style="color:#4e9a06">&amp;#34;Signature&amp;#34;&lt;/span>
Signature : RSA/SHA1, Thu &lt;span style="color:#0000cf;font-weight:bold">31&lt;/span> Oct &lt;span style="color:#0000cf;font-weight:bold">2019&lt;/span> 10:05:05 AM UTC, Key ID c0b5e0ab66fd4949
&lt;span style="color:#8f5902;font-style:italic">#Last 8 chars of Key ID: 66fd4949&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#See if it matches the version of any of the gpg keys installed.&lt;/span>
rpm -qa &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep gpg-pubkey &lt;span style="color:#000;font-weight:bold">|&lt;/span> xargs -n1 rpm -q --queryformat &lt;span style="color:#4e9a06">&amp;#34;%{NAME} %{VERSION} %{PACKAGER}\n&amp;#34;&lt;/span>
gpg-pubkey 66fd4949 VMware, Inc. -- Linux Packaging Key -- linux-packages@vmware.com
gpg-pubkey 3e1ba8d5 Google Cloud Packages RPM Signing Key gc-team@google.com
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="check-if-an-image-has-vulnerabilities">Check if an image has vulnerabilities&lt;/h2>
&lt;p>Use the security scanners to find security issues. Alternatively The &lt;code>tdnf updateinfo info&lt;/code> command displays all the applicable security updates the host needs.&lt;/p>
&lt;h2 id="check-if-a-cve-is-fixed">Check if a CVE is Fixed&lt;/h2>
&lt;p>The Photon team fixes vulnerabilities and publishes advisories to &lt;a href="https://github.com/vmware/photon/wiki/Security-Advisories">https://github.com/vmware/photon/wiki/Security-Advisories&lt;/a>.&lt;/p>
&lt;h2 id="to-check-if-security-updates-are-available">To Check if Security Updates are Available&lt;/h2>
&lt;p>Use the &lt;code>tdnf updateinfo info&lt;/code>, &lt;code>tdnf update --security&lt;/code> or &lt;code>tdnf update ---sec-severity &amp;lt;level&amp;gt;&lt;/code> commands to check if security updates are available. For example:&lt;/p>
&lt;p>Check if there are any security updates&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">root@photon [ ~ ]# tdnf updateinfo
70 Security notice(s)
&lt;/code>&lt;/pre>&lt;p>Check if there are security updates for libssh2. note this is relative to what is installed in local&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">root@photon[ ~ ]# tdnf updateinfo list libssh2
patch:PHSA-2020-3.0-0047 Security libssh2-1.9.0-2.ph3.x86_64.rpm
patch:PHSA-2019-3.0-0025 Security libssh2-1.9.0-1.ph3.x86_64.rpm
patch:PHSA-2019-3.0-0009 Security libssh2-1.8.2-1.ph3.x86_64.rpm
patch:PHSA-2019-3.0-0008 Security libssh2-1.8.0-2.ph3.x86_64.rpm
&lt;/code>&lt;/pre>&lt;p>Show details of all the libssh2 updates
root@photon [ ~ ]# tdnf updateinfo info libssh2
Name : libssh2-1.9.0-2.ph3.x86_64.rpm
Update ID : patch:PHSA-2020-3.0-0047
Type : Security
Updated : Wed Jan 15 10:48:25 2020
Needs Reboot: 0
Description : Security fixes for {&amp;lsquo;CVE-2019-17498&amp;rsquo;}
Name : libssh2-1.9.0-1.ph3.x86_64.rpm
Update ID : patch:PHSA-2019-3.0-0025
Type : Security
Updated : Sat Aug 17 16:14:35 2019
Needs Reboot: 0
Description : Security fixes for {&amp;lsquo;CVE-2019-13115&amp;rsquo;}
Name : libssh2-1.8.2-1.ph3.x86_64.rpm
Update ID : patch:PHSA-2019-3.0-0009
Type : Security
Updated : Sat Apr 13 03:34:22 2019
Needs Reboot: 0
Description : Security fixes for {&amp;lsquo;CVE-2019-3859&amp;rsquo;, &amp;lsquo;CVE-2019-3862&amp;rsquo;, &amp;lsquo;CVE-2019-3861&amp;rsquo;, &amp;lsquo;CVE-2019-3857&amp;rsquo;, &amp;lsquo;CVE-2019-3858&amp;rsquo;, &amp;lsquo;CVE-2019-3863&amp;rsquo;, &amp;lsquo;CVE-2019-3860&amp;rsquo;, &amp;lsquo;CVE-2019-3856&amp;rsquo;}
Name : libssh2-1.8.0-2.ph3.x86_64.rpm
Update ID : patch:PHSA-2019-3.0-0008
Type : Security
Updated : Fri Mar 29 16:04:18 2019
Needs Reboot: 0
Description : Security fixes for {&amp;lsquo;CVE-2019-3855&amp;rsquo;}&lt;/p>
&lt;pre>&lt;code>
install all security updates &amp;gt;= score 9.0 (CVSS_v3.0_Severity)
```console
root@photon [ ~ ]# tdnf update --sec-severity 9.0
Upgrading:
apache-tomcat noarch 8.5.50-1.ph3 photon-updates 9.00M 9440211
bash x86_64 4.4.18-2.ph3 photon-updates 3.16M 3315720
bzip2 x86_64 1.0.8-1.ph3 photon-updates 124.99k 127990
bzip2-libs x86_64 1.0.8-1.ph3 photon-updates 74.31k 76096
file x86_64 5.34-2.ph3 photon-updates 43.02k 44056
file-libs x86_64 5.34-2.ph3 photon-updates 5.21M 5458536
git x86_64 2.23.1-2.ph3 photon-updates 24.34M 25519969
glib x86_64 2.58.0-4.ph3 photon-updates 3.11M 3265152
libseccomp x86_64 2.4.0-2.ph3 photon-updates 315.79k 323368
libssh2 x86_64 1.9.0-2.ph3 photon-updates 238.41k 244136
linux-esx x86_64 4.19.97-2.ph3 photon-updates 12.68M 13299655
Total installed size: 58.28M 61114889
&lt;/code>&lt;/pre></description></item><item><title>Docs: Package Management</title><link>/docs/troubleshooting-guide/photon-os-general-troubleshooting/package-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/troubleshooting-guide/photon-os-general-troubleshooting/package-management/</guid><description>
&lt;p>&lt;a href="https://github.com/vmware/tdnf">TDNF&lt;/a> is the default package manager for Photon OS. The standard syntax for &lt;code>tdnf&lt;/code> commands is the same as that for DNF and YUM. TDNF reads YUM repositories from &lt;strong>/etc/yum.repos.d/&lt;/strong>.&lt;/p>
&lt;p>To find the main configuration file and see its contents, run the following command:&lt;/p>
&lt;pre>&lt;code>cat /etc/tdnf/tdnf.conf
[main]
gpgcheck=1
installonly_limit=3
clean_requirements_on_remove=true
repodir=/etc/yum.repos.d
cachedir=/var/cache/tdnf
&lt;/code>&lt;/pre>&lt;p>Repositories have a &lt;strong>.repo&lt;/strong> file extension, The following repositories are available in &lt;strong>/etc/yum.repos.d/&lt;/strong> :&lt;/p>
&lt;pre>&lt;code>ls /etc/yum.repos.d/
photon-extras.repo
photon-iso.repo
photon-updates.repo
photon.repo
&lt;/code>&lt;/pre>&lt;p>Use the &lt;code>tdnf repolist&lt;/code> command to list the repositories. Tdnf filters the results by their status &lt;strong>enabled&lt;/strong>, &lt;strong>disabled&lt;/strong>, and &lt;strong>all&lt;/strong>. Running the &lt;code>tdnf repolist&lt;/code> command without arguments displays the enabled repositories.&lt;/p>
&lt;pre>&lt;code>#tdnf repolist
repo id repo name status
photon-extras VMware Photon Extras 3.0(x86_64) enabled
photon-debuginfo VMware Photon Linux debuginfo 3.0(x86_64)enabled
photon VMware Photon Linux 3.0(x86_64) enabled
photon-updates VMware Photon Linux 3.0(x86_64) Updates enabled
root@photon-75829bfd01d0 [ ~ ]#
&lt;/code>&lt;/pre>&lt;p>The following repositories are important for Photon:&lt;/p>
&lt;ul>
&lt;li>photon-updates : This repo contains RPM updates for CVE/version and updates/others fixes.&lt;/li>
&lt;li>photon-debuginfo : This repo contains information about RPMs with debug symbols.&lt;/li>
&lt;li>photon : This repo generally contains the RPM versions packaged with the released ISO.&lt;/li>
&lt;/ul>
&lt;p>To check the local cache data from the repository, run the following command:&lt;/p>
&lt;pre>&lt;code># ls -l /var/cache/tdnf/photon
total 12
-r--r----- 1 root root 0 Apr 3 22:34 lastrefresh
drwxr-x--- 2 root root 4096 Apr 3 22:34 repodata
drwxr-x--- 4 root root 4096 Feb 4 14:31 rpms
drwxr-x--- 2 root root 4096 Apr 3 22:34 solvcache
&lt;/code>&lt;/pre>&lt;p>##Usage
The &lt;code>tdnf&lt;/code> command can be used in the following ways:&lt;/p>
&lt;p>&lt;code>#tdnf repolist --refresh&lt;/code> : This command is used to refresh the repolist. Generally there is a cache of the repo data stored in the local VM.&lt;/p>
&lt;p>&lt;code>#tdnf install &amp;lt;rpm name&amp;gt;&lt;/code> : This command is used to install a RPM. This command installs the latest version of the RPM.&lt;/p>
&lt;p>&lt;code>#tdnf install &amp;lt;pkg-name&amp;gt;-&amp;lt;verison&amp;gt;-&amp;lt;release&amp;gt;.&amp;lt;photon-release&amp;gt;&lt;/code> : This command is used to install a particular RPM version. For example, run &lt;code># tdnf install systemd-239-11.ph3&lt;/code>.&lt;/p>
&lt;p>&lt;code>#tdnf list systemd&lt;/code> : This command is used to list the available RPM versions in the repository.&lt;/p>
&lt;p>&lt;code>#tdnf makecache&lt;/code> : This command updates the cached binary metadata for all known repositories.&lt;/p>
&lt;p>&lt;code>tdnf clean all&lt;/code> : This command cleans up temporary files, data, and metadata. It takes the argument &lt;code>all&lt;/code>.&lt;/p>
&lt;pre>&lt;code>#tdnf list systemd
Refreshing metadata for: 'VMware Photon Linux 3.0(x86_64)'
systemd.x86_64 239-15.ph3 @System
systemd.x86_64 239-11.ph3 photon-updates
systemd.x86_64 239-12.ph3 photon-updates
systemd.x86_64 239-13.ph3 photon-updates
systemd.x86_64 239-14.ph3 photon-updates
systemd.x86_64 239-15.ph3 photon-updates
systemd.x86_64 239-17.ph3 photon-updates
systemd.x86_64 239-18.ph3 photon-updates
systemd.x86_64 239-19.ph3 photon-updates
systemd.x86_64 239-10.ph3 photon
systemd.x86_64 239-10.ph3 photon
root@photon-4a0e7f2307d4 [ /WS/photon-dev/photon ]#
&lt;/code>&lt;/pre>&lt;p>Here, &lt;code>@System&lt;/code> indicates that the particular RPM is installed in the VM.&lt;/p>
&lt;p>To upgrade/downgrade RPMs run the following commands:&lt;/p>
&lt;pre>&lt;code>#tdnf upgrade &amp;lt;pkg-name&amp;gt;
#tdnf downgrade &amp;lt;pkg-name&amp;gt;
&lt;/code>&lt;/pre>&lt;p>After upgrade/downgrade the dependent packages must be manually upgraded/downgraded as well. Use the &lt;code>#tdnf remove &amp;lt;pkg-name&amp;gt;&lt;/code> command to remove packages and &lt;code># tdnf clean all&lt;/code> to clear cached packages, metadata, dbcache, plugins and expire-cache.&lt;/p>
&lt;p>#RPM
RPM is an open source package management system capable of building software from source into easily distributable packages. It is used for installing, updating and uninstalling packaged software.
RPM can also be used to query detailed information about the packaged software and to check if a particular package is installed or not.&lt;/p>
&lt;p>You can do the following operation using the RPM binaries:&lt;/p>
&lt;ul>
&lt;li>Install/Upgrade/Downgrade/Remove RPMs from a virtual machine.&lt;/li>
&lt;li>Check the version of the packages installed.&lt;/li>
&lt;li>Check the package contents.&lt;/li>
&lt;li>Check the dependencies of a package.&lt;/li>
&lt;li>Find the source package of a file.&lt;/li>
&lt;/ul>
&lt;p>To find the package that contains a particular binary, run &lt;code>rpm -q â€”whatprovides &amp;lt;binary/file path&amp;gt;&lt;/code> command.&lt;/p>
&lt;p>##Usage
The &lt;code>rpm&lt;/code> command can be used in the following ways:&lt;/p>
&lt;ul>
&lt;li>&lt;code>rpm -ivh &amp;lt;rpm file path&amp;gt;&lt;/code> : This command installs the RPM in a virtual machine.&lt;/li>
&lt;li>&lt;code>rpm -Uvh &amp;lt;rpm file path&amp;gt;&lt;/code> : This command is used to upgrade/downgrade the RPM.&lt;/li>
&lt;li>&lt;code>rpm -e &amp;lt;rpm file path&amp;gt;&lt;/code> : This command uninstalls the RPM from the virtual machine.&lt;/li>
&lt;li>&lt;code>rpm -qp &amp;lt;rpm file path&amp;gt; --provides&lt;/code> : This displays the libraries provided by the RPM.&lt;/li>
&lt;li>&lt;code>rpm -qp &amp;lt;rpm file path&amp;gt; --requires&lt;/code> : This displays the binaries/libraries required to install a particular rpm.&lt;/li>
&lt;li>&lt;code>rpm -qa&lt;/code> : This displays a list of all installed packages.&lt;/li>
&lt;li>&lt;code>rpm -ql &amp;lt;package file.rpm&amp;gt;&lt;/code> : This command lists all files in the package file.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Network Configuration</title><link>/docs/troubleshooting-guide/photon-os-general-troubleshooting/network-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/troubleshooting-guide/photon-os-general-troubleshooting/network-configuration/</guid><description>
&lt;p>systemd-networkd is a system daemon that manages network configurations. It detects and configures network devices as they appear. It can also create virtual network devices.&lt;/p>
&lt;p>##Configuration Examples
All configurations are stored as &lt;strong>foo.network&lt;/strong> in the &lt;strong>/etc/systemd/network/&lt;/strong>, &lt;strong>/lib/systemd/network/&lt;/strong> and &lt;strong>/run/systemd/network/&lt;/strong> folder. Use the &lt;code>networkctl list&lt;/code> command to list all the devices on the system.&lt;/p>
&lt;p>After making changes to a configuration file, restart the &lt;strong>systemd-networkd.service&lt;/strong> if version is &amp;lt; 245, for other version run the following commands:&lt;/p>
&lt;pre>&lt;code>root@photon [ /home/sus ]# networkctl reload
root@photon [ /home/sus ]# networkctl reconfigure eth0
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Note&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The options mentioned in the configuration files are case sensitive.&lt;/li>
&lt;li>Set &lt;code>DHCP=yes&lt;/code> to accept IPv4 and IPv6 DHCP requests.&lt;/li>
&lt;li>Set &lt;code>DHCP=ipv4&lt;/code> to accept IPv4 DHCP requests.&lt;/li>
&lt;li>Set LinkLocalAddressing=no to disable IPv6. Please do not disable IPv6 via sysctl. When &lt;code>LinkLocalAddressing=no&lt;/code> in the .network file, the kernel drops addresses starting with &lt;strong>fe80&lt;/strong>, for example &lt;strong>fe80::20c:29ff:fe4c:7eca&lt;/strong>. If IPv6LL address is not available networkd will not start IPv6 configurations.&lt;/li>
&lt;/ul>
&lt;p>To link network configurations using DHCPv4 (IPv6 disabled), run the following command:&lt;/p>
&lt;pre>&lt;code>/etc/systemd/network/20-eth0.network
[Match]
Name=eth0
[Network]
LinkLocalAddressing=no
DHCP=ipv4
&lt;/code>&lt;/pre>&lt;p>To link network configurations using DHCPv6, run the following command:&lt;/p>
&lt;pre>&lt;code>/etc/systemd/network/20-eth0.network
[Match]
Name=eth0
[Network]
IPv6AcceptRA=yes
DHCP=ipv6
&lt;/code>&lt;/pre>&lt;p>To link network configurations using a static IP address, run the following command:&lt;/p>
&lt;pre>&lt;code>/etc/systemd/network/20-wired.network
[Match]
Name=enp1s0
[Network]
Address=10.1.10.9/24
Gateway=10.1.10.1
DNS=10.1.10.1
&lt;/code>&lt;/pre>&lt;p>Here &lt;code>Address=&lt;/code> can be used more than once to configure multiple IPv4 or IPv6 addresses.&lt;/p>
&lt;p>A &lt;strong>.link&lt;/strong> file can be used to rename an interface. For example, set a predictable interface name for a Ethernet adapter based on its MAC address by running the following command:&lt;/p>
&lt;pre>&lt;code>/etc/systemd/network/10-test0.link
[Match]
MACAddress=12:34:56:78:90:ab
[Link]
Description=my custom name
Name=test123
&lt;/code>&lt;/pre>&lt;p>##Configuration Files
Configuration files are located in &lt;strong>/usr/lib/systemd/network/&lt;/strong> folder, the volatile runtime network directory in &lt;strong>/run/systemd/network/&lt;/strong> folder and the local administration network directory in &lt;strong>/etc/systemd/network/&lt;/strong> folder. Configuration files in &lt;strong>/etc/systemd/network/&lt;/strong> folder have the highest priority.&lt;/p>
&lt;p>There are three types of configuration files and they use a format similar to systemd unit files.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>.network&lt;/strong> : These files apply a network configuration to a matching device.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>.netdev&lt;/strong> : These files are used to create a virtual network device for a matching environment.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>.link&lt;/strong> : When a network device appears, udev looks for the first matching &lt;strong>.link&lt;/strong> file.
These link files follow the following rules:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Only if all conditions in the &lt;code>[Match]&lt;/code> section are matched, the profile will be activated.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>An empty &lt;code>[Match]&lt;/code> section means the profile can apply to any case (can be compared to the * wild card)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>All configuration files are collectively sorted and processed in lexical order, regardless of the directory it resides in.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Files with identical names replace each other.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>##Dupliate Matches
If we have multiple configuration files matching an interface, the first (in lexical order) network file matching a given device is applied. All other files are ignored even if they match. The following is an example of matching configuration files:&lt;/p>
&lt;pre>&lt;code>builder@localhost [ ~ ]$ cat /etc/systemd/network/10-eth0.network
[Match]
Name=eth0
[Network]
DHCP=yes
builder@localhost [ ~ ]$ cat /etc/systemd/network/99-dhcp-en.network
[Match]
Name=e*
[Network]
DHCP=yes
IPv6AcceptRA=no
&lt;/code>&lt;/pre>&lt;p>##Network Files
These files are used to set network configuration variables for servers and containers.
&lt;strong>.network&lt;/strong> files have the following sections:&lt;/p>
&lt;p>###&lt;code>[Match]&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Accepted Values&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>Name=&lt;/code>&lt;/td>
&lt;td>Matches device names. For example: &lt;code>en*&lt;/code>. By using &lt;code>!&lt;/code> prefix the list can be inverted.&lt;/td>
&lt;td>Device names separated by a white space, logical negation (!).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>MACAddress=&lt;/code>&lt;/td>
&lt;td>Matches MAC addresses. For example: &lt;code>MACAddress=01:23:45:67:89:ab 00-11-22-33-44-55 AABB.CCDD.EEFF&lt;/code>&lt;/td>
&lt;td>MAC addresses with full colon-, hyphen- or dot-delimited hexadecimal separated by a white space.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Host=&lt;/code>&lt;/td>
&lt;td>Matches the host name or the machine ID of the host.&lt;/td>
&lt;td>Hostname string or Machine ID&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Virtualization=&lt;/code>&lt;/td>
&lt;td>Checks whether the system is running in a virtual environment. &lt;code>Virtualization=false&lt;/code> will only match your host machine, while &lt;code>Virtualization=true&lt;/code> matches containers or VMs. It is also possible to check for a specific virtualization type or implementation.&lt;/td>
&lt;td>boolean, logical negation (!), type (vm, container), implementation (qemu, kvm, zvm, vmware, microsoft, oracle, xen, bochs, uml, bhyve, qnx, openvz, lxc, lxc-libvirt, systemd-nspawn, docker, podman, rkt, wsl, acrn)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>###&lt;code>[Link]&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>MACAddress=&lt;/code> : Used to spoof MAC address.&lt;/li>
&lt;li>&lt;code>MTUBytes=&lt;/code> : Setting a larger MTU value (For example: when using jumbo frames) can significantly speed up your network transfers.&lt;/li>
&lt;li>&lt;code>Multicast&lt;/code> : Enables the use of multicast on interface(s).&lt;/li>
&lt;/ul>
&lt;p>###&lt;code>[Network]&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Accepted Values&lt;/th>
&lt;th>Default Value&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>DHCP=&lt;/code>&lt;/td>
&lt;td>Controls DHCPv4 and/or DHCPv6 client support.&lt;/td>
&lt;td>Boolean, &lt;code>ipv4&lt;/code>, &lt;code>ipv6&lt;/code>&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>DHCPServer=&lt;/code>&lt;/td>
&lt;td>If enabled, a DHCPv4 server will be started.&lt;/td>
&lt;td>Boolean&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>MulticastDNS=&lt;/code>&lt;/td>
&lt;td>Enables multicast DNS support. When set to &lt;code>resolve&lt;/code>, only resolution is enabled.&lt;/td>
&lt;td>Boolean, &lt;code>resolve&lt;/code>&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>DNSSEC=&lt;/code>&lt;/td>
&lt;td>Controls the DNSSEC DNS validation support on the link. When set to &lt;code>allow-downgrade&lt;/code>, compatibility with non-DNSSEC capable networks is increased, by automatically turning off DNSSEC.&lt;/td>
&lt;td>Boolean, &lt;code>allow-downgrade&lt;/code>&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>DNS=&lt;/code>&lt;/td>
&lt;td>Configures static DNS addresses. can be specified more than once.&lt;/td>
&lt;td>&lt;code> inet_pton&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Domains= &lt;/code>&lt;/td>
&lt;td>Indicates domains which must be resolved using the DNS servers.&lt;/td>
&lt;td>domain name, optionally prefixed with a &lt;strong>~&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>IPForward=&lt;/code>&lt;/td>
&lt;td>If enabled, incoming packets on any network interface will be forwarded to any other interfaces according to the routing table.&lt;/td>
&lt;td>Boolean, &lt;code>ipv4&lt;/code>, &lt;code>ipv6&lt;/code>&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>IPMasquerade=&lt;/code>&lt;/td>
&lt;td>If enabled, packets forwarded from the network interface appear as if they are coming from the local host.&lt;/td>
&lt;td>Boolean&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>IPv6PrivacyExtensions=&lt;/code>&lt;/td>
&lt;td>Configures use of stateless temporary addresses that change over time. When set to &lt;code>prefer-public&lt;/code>, the privacy extensions are enabled, but prefers public addresses over temporary addresses. When set to &lt;code>kernel&lt;/code>, the kernel&amp;rsquo;s default setting will be left in place.&lt;/td>
&lt;td>Boolean, &lt;code>prefer-public&lt;/code>, &lt;code>kernel&lt;/code>&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>###&lt;code>[Address]&lt;/code>
&lt;code>Address=&lt;/code> option is mandatory unless DHCP is used.&lt;/p>
&lt;p>###&lt;code>[Route]&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Gateway=&lt;/code> option is mandatory unless DHCP is used.&lt;/li>
&lt;li>&lt;code>Destination=&lt;/code> option defines the destination prefix of the route, possibly followed by a slash and the prefix length.
If Destination is not present in &lt;code>[Route]&lt;/code> section it is treated as a default route.
&lt;strong>Note:&lt;/strong> You can add the &lt;code>Address=&lt;/code> and &lt;code>Gateway=&lt;/code> keys in the &lt;code>[Network]&lt;/code> section as a short-hand, if the &lt;code>[Address]&lt;/code> section contains only an Address key and &lt;code>[Route]&lt;/code> section contains only a Gateway key.&lt;/li>
&lt;/ul>
&lt;p>###DHCP&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Accepted Values&lt;/th>
&lt;th>Default Value&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>UseDNS=&lt;/code>&lt;/td>
&lt;td>Defines the DHCP server to be used.&lt;/td>
&lt;td>Boolean&lt;/td>
&lt;td>true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Anonymize=&lt;/code>&lt;/td>
&lt;td>When set to &lt;code>true&lt;/code>, the options sent to the DHCP server will follow RFC7844 (Anonymity Profiles for DHCP Clients) to minimize disclosure of identifying information.&lt;/td>
&lt;td>Boolean&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>UseDomains=&lt;/code>&lt;/td>
&lt;td>Defines the DHCP server to be used as the DNS search domain. If set to &lt;code>route&lt;/code>, the domain name received from the DHCP server will be used for routing DNS queries only and not for searching. This option can sometimes fix local name resolving when using systemd-resolved.&lt;/td>
&lt;td>Boolean, &lt;code>route&lt;/code>&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>###&lt;code>[DHCPServer]&lt;/code>
The following is an example of a DHCP server configuration which works well with hostapd to create a wireless hotspot. &lt;code>IPMasquerade&lt;/code> adds the firewall rules for NAT and &lt;code>IPForward&lt;/code> enables packet forwarding.&lt;/p>
&lt;pre>&lt;code>/etc/systemd/network/wlan0.network
[Match]
Name=wlan0
[Network]
Address=10.1.1.1/24
DHCPServer=true
IPMasquerade=true
IPForward=true
[DHCPServer]
PoolOffset=100
PoolSize=20
EmitDNS=yes
DNS=9.9.9.9
&lt;/code>&lt;/pre>&lt;p>##Netdev Files
These files create virtual network devices. They have the following two sections:&lt;/p>
&lt;p>###&lt;code>[Match]&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Host=&lt;/code> : The host name.&lt;/li>
&lt;li>&lt;code>Virtualization=&lt;/code> : Checks if it is running in a virtual environment.&lt;/li>
&lt;/ul>
&lt;p>###&lt;code>[NetDev]&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Name=&lt;/code> : The interface&amp;rsquo;s name. This is a mandatory field.&lt;/li>
&lt;li>&lt;code>Kind=&lt;/code> : For example: bridge, bond, vlan, veth, sit, etc. This is a mandatory field.&lt;/li>
&lt;/ul>
&lt;p>##Link Files
These files are an alternative to custom udev rules and will be applied by udev as the device appears. They have the following two sections:&lt;/p>
&lt;p>###&lt;code>[Match]&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>MACAddress=&lt;/code> : The MAC address.&lt;/li>
&lt;li>&lt;code>Host=&lt;/code> : The host name.&lt;/li>
&lt;li>&lt;code>Virtualization=&lt;/code> : Checks if it is running in a virtual environment.&lt;/li>
&lt;li>&lt;code>Type=&lt;/code> : the device type. For example: vlan.&lt;/li>
&lt;/ul>
&lt;p>###&lt;code>[Link]&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>MACAddressPolicy=&lt;/code> : Persistent or random addresses.&lt;/li>
&lt;li>&lt;code>MACAddress=&lt;/code> : The MAC address.
&lt;strong>Note:&lt;/strong> The system &lt;strong>/usr/lib/systemd/network/99-default.link&lt;/strong> file is sufficient for most cases.&lt;/li>
&lt;/ul>
&lt;p>##Debugging Systemd-networkd
The log can be generated by creating a drop-in config. For example:&lt;/p>
&lt;pre>&lt;code># /etc/systemd/system/systemd-networkd.service.d/override.conf
[Service]
Environment=SYSTEMD_LOG_LEVEL=debug
&lt;/code>&lt;/pre></description></item><item><title>Docs: Cloud-init</title><link>/docs/troubleshooting-guide/photon-os-general-troubleshooting/cloud-init/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/troubleshooting-guide/photon-os-general-troubleshooting/cloud-init/</guid><description>
&lt;p>Cloud-init is mixture of Python and Shell scripts that initialize cloud instances of Linux machines.
Cloud-init performs boot time configuration of a system.
We can configure users, hostname, host network, write files to disk, manage packages, run custom scripts and so on.&lt;/p>
&lt;p>##DataSources
Datasource is the source of configuration data for cloud-init that is typically given by a user (For example: userdata) or obtained from the cloud that created the configuration drive (For example: metadata).
Userdata includes files, YAML configuration files and shell scripts.
Metadata includes server name, instance id, display name and other cloud specific details.&lt;/p>
&lt;p>Currently there are two datasources used in Photon OS, it&amp;rsquo;s usage is described in the following sections:&lt;/p>
&lt;ul>
&lt;li>DataSourceOVF - Used for GuestOS customization in vSphere.&lt;/li>
&lt;li>VMwareGuestInfo - Used to read meta, user, and vendor data from VMware vSphere&amp;rsquo;s GuestInfo interface and initialize the system.&lt;/li>
&lt;/ul>
&lt;p>###DataSourceOVF
The OVF (Open Virtualization Format) Datasource provides a datasource for reading data from an OVF transport ISO.
The vmtoolsd service extracts the customization spec cab file from the OVF and calls either cloud-init or the GuestOS customization scripts.
The &lt;code>disable_vmware_customization&lt;/code> flag in &lt;strong>/etc/cloud/cloud.cfg&lt;/strong> file determines if GOSC scripts or cloud-init is used.&lt;/p>
&lt;ul>
&lt;li>&lt;code>disable_vmware_customization: false&lt;/code> : Cloud-init is used for Guest OS customization&lt;/li>
&lt;li>&lt;code>disable_vmware_customization: true&lt;/code> : GuestOS customization scripts is used for Guest OS customization&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note&lt;/strong>:
The default value for &lt;code>disable_vmware_customization&lt;/code> is set to &lt;code>true&lt;/code> in the &lt;strong>/etc/cloud/cloud.cfg&lt;/strong> file&lt;/p>
&lt;p>###VMwareGuestInfo
VMwareGuestInfo data source is configured by setting &lt;code>guestinfo&lt;/code> properties on a VM. This can be set by performing one of the following:&lt;/p>
&lt;ul>
&lt;li>Using the vmware-rpctool provided by open-vmtools.&lt;/li>
&lt;li>Modifying the &lt;strong>vmx&lt;/strong> file to set the guestinfo properties.&lt;/li>
&lt;/ul>
&lt;p>##Debugging Cloud-init Failures
Cloud-init has four services which are started in the following sequence:&lt;/p>
&lt;ol>
&lt;li>cloud-init-local - This service locates local data sources and applies networking configurations provided n the metadata (If there is no metadata it applies Fallback). Use &lt;code>$ systemctl status cloud-init-local&lt;/code> command to check its status.&lt;/li>
&lt;li>cloud-init - This service processes any user-data that is found and runs the cloud_init_modules in &lt;strong>/etc/cloud/cloud.cfg&lt;/strong>. Use &lt;code>$ systemctl status cloud-init&lt;/code> command to check its status.&lt;/li>
&lt;li>cloud-config - This service runs the cloud_config_modules in &lt;strong>/etc/cloud/cloud.cfg&lt;/strong> file. Use &lt;code>$ systemctl status cloud-config&lt;/code> command to check its status.&lt;/li>
&lt;li>cloud-final - This service runs any script that a user is accustomed to running after logging into a system (For example: package installations, configs, user-scripts) and runs cloud_final_modules in &lt;strong>/etc/cloud/cloud.cfg&lt;/strong> file. Use &lt;code>$ systemctl status cloud-final&lt;/code> command to check its status.&lt;/li>
&lt;/ol>
&lt;p>Cloud-init logs are available in the &lt;strong>/var/log/cloud-init.log&lt;/strong> file. Logs for GuestOS customization using DataSourceOVF are available in the &lt;strong>/var/log/vmware-imc/toolsDeployPkg.log&lt;/strong> and &lt;strong>/var/log/cloud-init.log&lt;/strong> files.&lt;/p>
&lt;p>To analyze the cloud-init boot time performance, run the following commands:&lt;/p>
&lt;ul>
&lt;li>&lt;code>$ cloud-init analyze blame&lt;/code> - The blame command prints in descending order, the units that took the longest to run. This output is useful for observe where cloud-init is spending its time during execution.&lt;/li>
&lt;li>&lt;code>$ cloud-init analyze show&lt;/code> - The show command prints a list of units, the time they started and how long they took to complete. It also prints a summary of total time per boot.&lt;/li>
&lt;li>&lt;code>$ cloud-init analyze dump&lt;/code> - The dump command dumps the cloud-init logs for the analyze modules and displays a list of dictionaries that can be consumed for other reporting needs.&lt;/li>
&lt;li>&lt;code>$ cloud-init status&lt;/code> - To know the overall status of clouf-init.&lt;/li>
&lt;/ul>
&lt;p>Cloud-init doesn&amp;rsquo;t configure the network if &lt;strong>/etc/cloud/cloud.cfg.d/99-disable-networking-config.cfg&lt;/strong> file is present and has the following content:&lt;/p>
&lt;ul>
&lt;li>network:Item&lt;/li>
&lt;li>config: disabled&lt;/li>
&lt;/ul>
&lt;p>Take a backup of &lt;strong>/etc/cloud/cloud.cfg.d/99-disable-networking-config.cfg&lt;/strong> file and remove it from it&amp;rsquo;s location.
Reconfigure the machine using metadata, userdata and vendordata.
Once the configurations are done copy the backup file to the same location.
Cloud-init will push it&amp;rsquo;s fallback configuration when service is restarted or rebooted and there is no local datasource to configure. To avoid this &lt;strong>/etc/cloud/cloud.cfg.d/99-disable-networking-config.cfg&lt;/strong> file is required.&lt;/p>
&lt;p>##Run Cloud-init Manually
To run cloud-init manually, run the following commands:&lt;/p>
&lt;pre>&lt;code>/usr/bin/cloud-init -d init (-d for debug)
/usr/bin/cloud-init -d modules (run all modules)
/usr/bin/cloud-init --file &amp;lt;config-yaml-file-path&amp;gt; init (if you want to run cloud-init with a configuration yaml file)
&lt;/code>&lt;/pre>&lt;p>When cloud-init is running, to force it to run with all configs engaged run the following command:&lt;/p>
&lt;pre>&lt;code>rm -rf /var/lib/cloud/*
&lt;/code>&lt;/pre>&lt;p>For more information about cloud-init, see
&lt;a href="https://cloudinit.readthedocs.io/en/latest/index.html">https://cloudinit.readthedocs.io/en/latest/index.html&lt;/a>&lt;a href="https://cloudinit.readthedocs.io/en/latest/index.html">https://cloudinit.readthedocs.io/en/latest/index.html&lt;/a>&lt;/p>
&lt;p>For more information about cloud-init CLI, see
&lt;a href="https://cloudinit.readthedocs.io/en/latest/topics/cli.html">https://cloudinit.readthedocs.io/en/latest/topics/cli.html&lt;/a>&lt;a href="https://cloudinit.readthedocs.io/en/latest/topics/cli.html">https://cloudinit.readthedocs.io/en/latest/topics/cli.html&lt;/a>&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>:Include the cloud-init log tarball and the vmtoolsd logs when you raise an issue.&lt;/p>
&lt;ol>
&lt;li>Collect cloud-init log tarball by running the &lt;code>cloud-init collect-logs&lt;/code> command.&lt;/li>
&lt;li>Collect the vmtoolsd logs from &lt;strong>/var/log/vmware-imc/toolsDeployPkg.log&lt;/strong> file.&lt;/li>
&lt;li>Attach the collected logs to the issue ticket.&lt;/li>
&lt;/ol></description></item><item><title>Docs: Open-vm-tools/Vmtoolsd</title><link>/docs/troubleshooting-guide/photon-os-general-troubleshooting/vmtoolsd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/troubleshooting-guide/photon-os-general-troubleshooting/vmtoolsd/</guid><description>
&lt;p>Vmtoolsd is a systemd service, using which we can set guestinfo properties metadata, userdata and vendordata etc., which in turn are consumed by cloud-init.
VMwareGuestInfo Datasource uses this guestinfo properties and applies them to the system.&lt;/p>
&lt;p>vmware-rpctool is a utility provided by open-vm-tools to set metadata, userdata and vendordata.
vmware-rpctool provides info.set and info.get options to set and get the guestinfo properties respectively.&lt;/p>
&lt;p>##Debugging
To check the status of the vmtoolsd service (vmtoolsd is dependant on vgauthd), run the following commands:&lt;/p>
&lt;pre>&lt;code>$ systemctl status vmtoolsd vgauthd
$ journalctl -u vmtoolsd
$ journalctl -u vgauthd
&lt;/code>&lt;/pre>&lt;p>To set and get metadata, userdata and vendordata, run the following commands:&lt;/p>
&lt;pre>&lt;code>$ /usr/bin/vmware-rpctool 'info-get guestinfo.metadata'
$ /usr/bin/vmware-rpctool 'info-get guestinfo.userdata'
$ /usr/bin/vmware-rpctool 'info-get guestinfo.vendordata'
&lt;/code>&lt;/pre>&lt;p>A YAML file can be used as input to the &lt;strong>rpctool&lt;/strong> using following commands:&lt;/p>
&lt;pre>&lt;code>vmware-rpctool &amp;quot;info-set guestinfo.userdata.encoding base64&amp;quot;
vmware-rpctool &amp;quot;info-set guestinfo.metadata.encoding base64&amp;quot;
vmware-rpctool &amp;quot;info-set guestinfo.metadata ${metadata file contents}&amp;quot;
vmware-rpctool &amp;quot;info-set guestinfo.userdata ${userdata file contents}&amp;quot;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Note&lt;/strong>:Include the cloud-init log tarball and the vmtoolsd logs when you raise an issue.&lt;/p>
&lt;ol>
&lt;li>Collect cloud-init log tarball by running the &lt;code>cloud-init collect-logs&lt;/code> command.&lt;/li>
&lt;li>Collect the vmtoolsd logs from &lt;strong>/var/log/vmware-imc/toolsDeployPkg.log&lt;/strong> file.&lt;/li>
&lt;li>Attach the logs collected to the issue ticket.&lt;/li>
&lt;/ol></description></item></channel></rss>
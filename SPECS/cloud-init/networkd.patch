From 64267639b14a56cb7e6509606fceb0f5e8f33fb3 Mon Sep 17 00:00:00 2001
From: Shreenidhi Shedi <sshedi@vmware.com>
Date: Thu, 4 Mar 2021 00:33:59 +0530
Subject: [PATCH] Network config V1 & V2 support

Signed-off-by: Shreenidhi Shedi <sshedi@vmware.com>
---
 cloudinit/net/networkd.py  | 165 +++++++++++++++++++++++++++++++++++++
 cloudinit/net/renderers.py |   4 +-
 cloudinit/net/v1tov2.py    | 116 ++++++++++++++++++++++++++
 3 files changed, 284 insertions(+), 1 deletion(-)
 create mode 100644 cloudinit/net/networkd.py
 create mode 100755 cloudinit/net/v1tov2.py

diff --git a/cloudinit/net/networkd.py b/cloudinit/net/networkd.py
new file mode 100644
index 00000000..1ded8b32
--- /dev/null
+++ b/cloudinit/net/networkd.py
@@ -0,0 +1,165 @@
+# vi: ts=4 expandtab
+#
+# Copyright (C) 2021 VMware Inc.
+#
+
+import os
+
+from . import v1tov2
+from . import renderer
+from pwd import getpwnam
+from grp import getgrnam
+from cloudinit import util
+from cloudinit import subp
+from cloudinit import log as logging
+
+
+LOG = logging.getLogger(__name__)
+
+
+class Renderer(renderer.Renderer):
+    ''' Renders network information in /etc/systemd/network '''
+
+    def __init__(self, config=None):
+        if not config:
+            config = {}
+        self.resolved_conf = config.get('resolved_conf_fn', '/etc/systemd/resolved.conf')
+        self.network_conf_dir = config.get('network_conf_dir', '/etc/systemd/network/')
+        self.network_fname_fptr = config.get('network_fname_fptr', '')
+
+
+    def create_network_file(self, content):
+        ifindex = 10
+
+        LOG.debug('Setting Networking Config Version 2')
+
+        for k, v in content.items():
+            if k == 'version' or k != 'ethernets':
+                continue
+
+            for key, val in v.items():
+                link = key
+
+                conf = '[Match]\n'
+                # Generate [Match] section
+                if 'match' in val:
+                    match = val['match']
+
+                    for i in match:
+                        if i == 'macaddress':
+                            conf += 'MACAddress=%s\n\n' % (match['macaddress'])
+                        elif i == 'driver':
+                            conf += 'Driver=%s\n' % (match['driver'])
+                            conf += 'Name=%s\n\n' % (link)
+                        elif i == 'name':
+                            conf += 'Name=%s\n\n' % (match['name'])
+                else:
+                    conf += 'Name=%s\n\n' % link
+
+                # Generate [Link] section
+                if ('mtu' in val):
+                    conf += '[Link]\nMTUBytes=%s\n\n' % (val['mtu'])
+
+                # Generate [Network] section
+                conf += '[Network]\n'
+
+                if ('dhcp4' in val and 'dhcp6' in val):
+                    if (val['dhcp4'] == True and val['dhcp6'] == True):
+                        conf += 'DHCP=yes\n'
+                    if (val['dhcp4'] == True and val['dhcp6'] == False):
+                        conf += 'DHCP=ipv4\n'
+                    if (val['dhcp4'] == False and val['dhcp6'] == True):
+                        conf += 'DHCP=ipv6\n'
+                    if (val['dhcp4'] == False and val['dhcp6'] == False):
+                        conf += 'DHCP=no\n'
+                elif ('dhcp4' in val):
+                    if val['dhcp4'] == True:
+                        conf += 'DHCP=ipv4\n'
+                elif ('dhcp6' in val):
+                    if (val['dhcp6'] == True):
+                        conf += 'DHCP=ipv6\n'
+
+                if ('nameservers' in val):
+                    nameservers = val['nameservers']
+
+                    if ('search' in nameservers):
+                        s = nameservers['search']
+                        conf += 'Domains=%s\n' % ' '.join(s)
+                    if ('addresses' in nameservers):
+                        s = nameservers['addresses']
+                        conf += 'DNS=%s\n' % ' '.join(s)
+
+                # Generate [DHCPv4 & DHCPv6] section
+                for item in ['dhcp4domain', 'dhcp6domain']:
+                    if item not in val:
+                        continue
+                    ret = str(val[item]).casefold()
+                    try:
+                        ret = strtobool(ret)
+                        ret = 'yes' if ret else 'no'
+                    except ValueError as e:
+                        if ret != 'route':
+                            LOG.warn('Invalid dhcp4domain value - %s', ret)
+                            ret = 'no'
+                    section = '[DHCPv4]' if item == 'dhcp4domain' else '[DHCPv6]'
+                    conf += '\n' + section + '\nUseDomains=' + ret + '\n\n'
+
+
+                # Generate [Address] section
+                if ('addresses' in val):
+                    for i in val['addresses']:
+                        conf += '\n[Address]\nAddress=%s\n' % (i)
+
+                # Generate [Route] section
+                if ('gateway4' in val):
+                    conf += '\n[Route]\nGateway=%s\n' % (val['gateway4'])
+
+                if ('gateway6' in val):
+                    conf += '\n[Route]\nGateway=%s\n' % (val['gateway6'])
+
+                if ('routes' in val):
+                    routes = val['routes']
+
+                    for i in routes:
+                        conf += '\n[Route]\n'
+                        if (i['via']):
+                            conf += 'Gateway=%s\n' % (i['via'])
+                        if (i['to']):
+                            conf += 'Destination=%s\n' % (i['to'])
+                        if (i['metric']):
+                            conf += 'Metric=%s\n' % (i['metric'])
+
+                net_fn = self.network_fname_fptr(self.network_conf_dir, link)
+                if not net_fn:
+                    net_fn = self.network_conf_dir + str(ifindex) + '-' + link + '.network'
+                else:
+                    net_fn = self.network_conf_dir + net_fn
+
+                util.write_file(net_fn, conf)
+                os.chown(net_fn, getpwnam('systemd-network')[2], getgrnam('systemd-network')[2])
+
+
+    def render_network_state(self, network_state, templates=None, target=None):
+        fpnplan = os.path.join(subp.target_path(target), self.network_conf_dir)
+        util.ensure_dir(os.path.dirname(fpnplan))
+
+        content = self._render_content(network_state)
+        self.create_network_file(content)
+
+
+    def _render_content(self, network_state):
+        if network_state.version == 2:
+            LOG.debug('V2 to V2 passthrough')
+            return network_state.config
+        if network_state.version == 1:
+            LOG.debug('Converting from V1 to V2')
+            return v1tov2.v1tov2(network_state.config)
+
+
+def available(target=None):
+    expected = ['systemctl']
+    search = ['/usr/bin', '/bin']
+    for p in expected:
+        if not subp.which(p, search=search, target=target):
+            return False
+    return True
diff --git a/cloudinit/net/renderers.py b/cloudinit/net/renderers.py
index e2de4d55..c3931a98 100644
--- a/cloudinit/net/renderers.py
+++ b/cloudinit/net/renderers.py
@@ -4,6 +4,7 @@ from . import eni
 from . import freebsd
 from . import netbsd
 from . import netplan
+from . import networkd
 from . import RendererNotFoundError
 from . import openbsd
 from . import sysconfig
@@ -13,12 +14,13 @@ NAME_TO_RENDERER = {
     "freebsd": freebsd,
     "netbsd": netbsd,
     "netplan": netplan,
+    "networkd": networkd,
     "openbsd": openbsd,
     "sysconfig": sysconfig,
 }
 
 DEFAULT_PRIORITY = ["eni", "sysconfig", "netplan", "freebsd",
-                    "netbsd", "openbsd"]
+                    "netbsd", "openbsd", "networkd"]
 
 
 def search(priority=None, target=None, first=False):
diff --git a/cloudinit/net/v1tov2.py b/cloudinit/net/v1tov2.py
new file mode 100755
index 00000000..ffd802d5
--- /dev/null
+++ b/cloudinit/net/v1tov2.py
@@ -0,0 +1,116 @@
+#!/usr/bin/env python3
+
+# Copyright (C) 2021 VMware Inc.
+
+# Simple module to convert cloud-init network config V1 to V2
+# This satisfies most of our use cases at the moment
+# Need to add support to handle all other configs as needed
+
+
+import yaml
+import ipaddress
+
+
+def parse_subnet_routes(cfg, conf):
+    # place holder for routes inside subnets
+    pass
+
+
+def parse_subnets(v2cfg, cfg, conf):
+    ip4prefixlen = None
+    for i in conf:
+        for k, v in i.items():
+            if k == 'type':
+                if v == 'dhcp' or v == 'dhcp4':
+                    cfg['id0']['dhcp4'] = True
+                if v == 'dhcp6':
+                    cfg['id0']['dhcp6'] = True
+                if v == 'static' or v == 'static6':
+                    cfg['id0']['dhcp4'] = False
+                    cfg['id0']['dhcp6'] = False
+            elif k == 'address':
+                cfg['id0']['addresses'] = [v]
+            elif k == 'netmask':
+                ip4 = ipaddress.IPv4Network((0, v))
+                # TODO: need to make use of this
+                ip4prefixlen = ip4.prefixlen
+            elif k == 'gateway':
+                cfg['id0']['gateway4'] = v
+            elif k == 'dns_nameservers':
+                try:
+                    cfg['id0']['nameservers'].update({'addresses' : v})
+                except KeyError:
+                    cfg['id0']['nameservers'] = {'addresses' : v}
+            elif k == 'dns_search':
+                try:
+                    cfg['id0']['nameservers'].update({'search' : v})
+                except KeyError:
+                    cfg['id0']['nameservers'] = {'search' : v}
+            elif k == 'routes':
+                parse_subnet_routes(cfg, v)
+
+    v2cfg['ethernets'].update(cfg)
+
+
+def parse_phy(v2cfg, conf):
+    cfg = dict(id0 = dict())
+    for k, v in conf.items():
+        if k == 'name':
+            cfg['id0']['set-name'] = v
+        elif k == 'mac_address':
+            cfg['id0']['match'] = {'macaddress' : v}
+        elif k == 'subnets':
+            parse_subnets(v2cfg, cfg, v)
+        elif k == 'mtu':
+            cfg['id0']['mtu'] = v
+
+    v2cfg['ethernets'].update(cfg)
+
+
+def parse_routes(v2cfg, conf):
+    cfg = {}
+    for k, v in conf.items():
+        if k == 'destination':
+            cfg['to'] = v
+        elif k == 'gateway':
+            cfg['via'] = v
+        elif k == 'metric':
+            cfg[k] = v
+
+    try:
+        v2cfg['ethernets']['id0']['routes'].append(cfg)
+    except KeyError:
+        v2cfg['ethernets']['id0']['routes'] = [cfg]
+
+
+def parse_nameserver(v2cfg, conf):
+    cfg = {}
+    for k, v in conf.items():
+        if k == 'search':
+            cfg[k] = v
+        elif k == 'address':
+            cfg['addresses'] = v
+
+    try:
+        v2cfg['ethernets']['id0']['nameservers'].update(cfg)
+    except KeyError:
+        v2cfg['ethernets']['id0']['nameservers'] = cfg
+
+
+def v1tov2(cfg):
+    v2cfg = dict(
+        ethernets =  dict()
+    )
+
+    for i in cfg:
+        for k, v in i.items():
+            if k != 'type':
+                continue
+            if v == 'physical':
+                parse_phy(v2cfg, i)
+            elif v == 'route':
+                parse_routes(v2cfg, i)
+            elif v == 'nameserver':
+                parse_nameserver(v2cfg, i)
+
+    return v2cfg
-- 
2.31.1

